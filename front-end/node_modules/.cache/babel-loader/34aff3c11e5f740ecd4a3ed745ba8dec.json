{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-add-prescription.js\";\nimport React, { Component } from 'react';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport Table from 'react-bootstrap/Table';\nimport axios from 'axios';\nimport AddIcon from '@material-ui/icons/Add';\n\nfunction Validatephone(contact) {\n  //    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var phoneno = /^\\+?([0-9]{12})\\)?$/;\n\n  if (contact.match(phoneno)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction validate(contact, prescription) {\n  // true means invalid, so our conditions got reversed\n  return {\n    prescription: prescription.length == 0,\n    contact: Validatephone(contact)\n  };\n} // Advanced Example\n\n\nconst options = {\n  title: \"My super datatable\",\n  dimensions: {\n    datatable: {\n      width: \"90%\",\n      height: \"40%\"\n    },\n    row: {\n      height: \"48px\"\n    }\n  },\n  keyColumn: \"id\",\n  font: \"Arial\",\n  data: {\n    columns: [{\n      id: \"id\",\n      label: \"id\",\n      colSize: \"150px\",\n      editable: false\n    }, {\n      id: \"name\",\n      label: \"name\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }, {\n      id: \"days\",\n      label: \"days\",\n      colSize: \"80px\",\n      editable: true,\n      dataType: \"number\",\n      valueVerification: val => {\n        let error = val > 100 ? true : false;\n        let message = val > 100 ? \"Value is too big\" : \"\";\n        return {\n          error: error,\n          message: message\n        };\n      }\n    }, {\n      id: \"morning\",\n      label: \"morning\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"noon\",\n      label: \"noon\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"evening\",\n      label: \"evening\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"instruction\",\n      label: \"instruction\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }],\n    rows: []\n  },\n  features: {\n    canEdit: true,\n    canDelete: true,\n    canSearch: true,\n    canOrderColumns: true,\n    additionalIcons: [{\n      title: \"Add medicine\",\n      icon: React.createElement(AddIcon, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }),\n      onClick: () => alert(\"Add Medicine!\")\n    }]\n  }\n};\nexport default class AddPrescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBlur = field => evt => {\n      this.setState({\n        touched: { ...this.state.touched,\n          [field]: true\n        }\n      });\n    };\n\n    this.state = {\n      contact: '',\n      name: '',\n      doctor: '',\n      doctorList: [],\n      checkdoctor: true,\n      showdoctor: false,\n      showMedicine: false,\n      medicine: '',\n      dosage: '',\n      days: '',\n      timings: [],\n      instructions: '',\n      prescriptions: [],\n      touched: {\n        contact: false\n      }\n    };\n    this.onChangecontact = this.onChangecontact.bind(this);\n    this.onChangedoctor = this.onChangedoctor.bind(this);\n    this.onChangemedicine = this.onChangemedicine.bind(this);\n    this.onChangedosage = this.onChangedosage.bind(this);\n    this.onChangedays = this.onChangedays.bind(this);\n    this.onChangeinstructions = this.onChangeinstructions.bind(this);\n    this.handleSubmitAdd = this.handleSubmitAdd.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChangecontact(e) {\n    this.setState({\n      contact: e.target.value,\n      nameList: [],\n      checkName: true\n    });\n  }\n\n  onChangedoctor(e) {\n    this.setState({\n      doctor: e.target.value\n    });\n  }\n\n  onChangemedicine(e) {\n    this.setState({\n      medicine: e.target.value\n    });\n  }\n\n  onChangedosage(e) {\n    this.setState({\n      dosage: e.target.value\n    });\n  }\n\n  onChangedays(e) {\n    this.setState({\n      days: e.target.value\n    });\n  }\n\n  onChangeinstructions(e) {\n    this.setState({\n      instructions: e.target.value\n    });\n  }\n\n  handleSubmitAdd(e) {\n    e.preventDefault();\n    console.log(this.state.medicine, this.state.dosage, this.state.days, this.state.timings, this.state.instructions);\n    var morning = false;\n    var afternoon = false;\n    var evening = false;\n\n    for (var i = 0; i < this.state.timings.length; i++) {\n      if (this.state.timings[i] == \"morning\") {\n        morning = true;\n      } else if (this.state.timings[i] == \"noon\") {\n        afternoon = true;\n      } else if (this.state.timings[i] == \"evening\") {\n        evening = true;\n      }\n    }\n\n    const item = {\n      medicine: this.state.medicine,\n      dosage: this.state.dosage,\n      days: this.state.days,\n      morning: morning,\n      afternoon: afternoon,\n      evening: evening,\n      timings: this.state.timings,\n      instructions: this.state.instructions\n    };\n    this.state.prescriptions.push(item);\n    console.log(this.state.prescriptions);\n    this.setState({\n      medicine: '',\n      dosage: '',\n      days: '',\n      instructions: ''\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      contact: this.state.contact,\n      name: this.state.name,\n      doctor: this.state.doctor,\n      prescriptions: this.state.prescriptions\n    };\n    console.log(obj);\n    axios.post('http://localhost:4000/addPrescription', obj).then(res => {\n      console.log(res.data);\n\n      if (res.data === \"success\") {\n        alert(\"prescription added Successfuly\");\n        this.setState({\n          contact: '',\n          name: '',\n          nameList: [],\n          checkName: true,\n          doctor: '',\n          doctorList: [],\n          checkdoctor: true,\n          showdoctor: false,\n          showMedicine: false,\n          medicine: '',\n          dosage: '',\n          timings: [],\n          instructions: '',\n          prescriptions: [],\n          touched: {\n            contact: false\n          }\n        });\n      } else {\n        alert(res.data);\n      }\n    });\n  }\n\n  render() {\n    const errors = validate(this.state.contact, this.state.prescriptions);\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\n\n    const shouldMarkError = field => {\n      const hasError = errors[field];\n      const shouldShow = this.state.touched[field];\n      return hasError ? shouldShow : false;\n    };\n\n    const createNameElement = () => {\n      if (!Validatephone(this.state.contact)) {\n        const user = {\n          contact: this.state.contact\n        };\n\n        if (this.state.checkName) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getpatients', user).then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              nameList: value,\n              name: value[0],\n              checkName: false,\n              showdoctor: true,\n              showMedicine: true\n            });\n          });\n        }\n\n        if (this.state.nameList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350\n            },\n            __self: this\n          }, \"Select Patient:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.name,\n            onChange: this.onChangename,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352\n            },\n            __self: this\n          }, this.state.nameList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 353\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            className: \"invalid-feedback\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362\n            },\n            __self: this\n          }, \"No patient exists with this contact.\");\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createDoctorElement = () => {\n      if (this.state.showdoctor) {\n        if (this.state.checkdoctor) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getdoctors').then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              doctorList: value,\n              doctor: value[0],\n              checkdoctor: false\n            });\n          });\n        }\n\n        if (this.state.doctorList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 408\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 409\n            },\n            __self: this\n          }, \"Select Reference Doctor:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 410\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.doctor,\n            onChange: this.onChangedoctor,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 411\n            },\n            __self: this\n          }, this.state.doctorList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 412\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 421\n            },\n            __self: this\n          });\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430\n          },\n          __self: this\n        });\n      }\n    };\n\n    const nameElement = createNameElement(this.state.contact);\n    const doctorElement = createDoctorElement();\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Contact: \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\",\n      value: this.state.contact,\n      onChange: this.onChangecontact,\n      onBlur: this.handleBlur(\"contact\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), shouldMarkError(\"contact\") ? React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, \"Please provide a valid contact like +921112223456.\") : \"\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, nameElement), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, doctorElement), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      disabled: isDisabled,\n      style: {\n        marginTop: 10\n      },\n      value: \"Add prescription\",\n      onClick: this.onSubmit,\n      className: \"btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-add-prescription.js"],"names":["React","Component","Multiselect","Table","axios","AddIcon","Validatephone","contact","phoneno","match","validate","prescription","length","options","title","dimensions","datatable","width","height","row","keyColumn","font","data","columns","id","label","colSize","editable","dataType","inputType","valueVerification","val","error","message","rows","features","canEdit","canDelete","canSearch","canOrderColumns","additionalIcons","icon","onClick","alert","AddPrescription","constructor","props","handleBlur","field","evt","setState","touched","state","name","doctor","doctorList","checkdoctor","showdoctor","showMedicine","medicine","dosage","days","timings","instructions","prescriptions","onChangecontact","bind","onChangedoctor","onChangemedicine","onChangedosage","onChangedays","onChangeinstructions","handleSubmitAdd","onSubmit","e","target","value","nameList","checkName","preventDefault","console","log","morning","afternoon","evening","i","item","push","obj","post","then","res","render","errors","isDisabled","Object","keys","some","x","shouldMarkError","hasError","shouldShow","createNameElement","user","promise1","Promise","resolve","reject","onChangename","map","n","createDoctorElement","nameElement","doctorElement","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Table from 'react-bootstrap/Table'\r\nimport axios from 'axios';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nfunction Validatephone(contact) \r\n{\r\n//    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    var phoneno = /^\\+?([0-9]{12})\\)?$/;\r\n    if(contact.match(phoneno))\r\n    {\r\n    return false;\r\n    }\r\n    else\r\n    {\r\n    return true;\r\n    }\r\n}\r\n\r\nfunction validate(contact,prescription) {\r\n    // true means invalid, so our conditions got reversed\r\n    return {\r\n        prescription: prescription.length==0,\r\n       contact: Validatephone(contact),\r\n    };\r\n}\r\n\r\n\r\n// Advanced Example\r\nconst options = {\r\n    title: \"My super datatable\",\r\n    dimensions: {\r\n      datatable: {\r\n        width: \"90%\",\r\n        height: \"40%\"\r\n      },\r\n      row: {\r\n        height: \"48px\"\r\n      }\r\n    },\r\n    keyColumn: \"id\",\r\n    font: \"Arial\",\r\n    data: {\r\n      columns: [\r\n        {\r\n          id: \"id\",\r\n          label: \"id\",\r\n          colSize: \"150px\",\r\n          editable: false\r\n        },\r\n        {\r\n          id: \"name\",\r\n          label: \"name\",\r\n          colSize: \"100px\",\r\n          editable: true,\r\n          dataType: \"text\",\r\n          inputType: \"input\"\r\n        },\r\n        {\r\n          id: \"days\",\r\n          label: \"days\",\r\n          colSize: \"80px\",\r\n          editable: true,\r\n          dataType: \"number\",\r\n          valueVerification: val => {\r\n            let error = val > 100 ? true : false;\r\n            let message = val > 100 ? \"Value is too big\" : \"\";\r\n            return {\r\n              error: error,\r\n              message: message\r\n            };\r\n          }\r\n        },\r\n        {\r\n          id: \"morning\",\r\n          label: \"morning\",\r\n          colSize: \"50px\",\r\n          editable: true,\r\n          dataType: \"boolean\",\r\n          inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"noon\",\r\n            label: \"noon\",\r\n            colSize: \"50px\",\r\n            editable: true,\r\n            dataType: \"boolean\",\r\n            inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"evening\",\r\n            label: \"evening\",\r\n            colSize: \"50px\",\r\n            editable: true,\r\n            dataType: \"boolean\",\r\n            inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"instruction\",\r\n            label: \"instruction\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        }\r\n      ],\r\n      rows: []\r\n    },\r\n    features: {\r\n      canEdit: true,\r\n      canDelete: true,\r\n      canSearch: true,\r\n      canOrderColumns: true,\r\n      additionalIcons: [\r\n        {\r\n          title: \"Add medicine\",\r\n          icon: <AddIcon color=\"primary\" />,\r\n          onClick: () => alert(\"Add Medicine!\")\r\n        }\r\n      ],\r\n    }\r\n  };\r\n\r\n\r\nexport default class AddPrescription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            contact: '',\r\n            name:'',\r\n            doctor:'',\r\n            doctorList:[],\r\n            checkdoctor:true,\r\n            showdoctor:false,\r\n            showMedicine:false,\r\n            medicine:'',\r\n            dosage:'',\r\n            days:'',\r\n            timings:[],\r\n            instructions:'',\r\n            prescriptions : [],\r\n            touched: {\r\n                contact: false,\r\n              }\r\n            \r\n        }\r\n        this.onChangecontact = this.onChangecontact.bind(this);\r\n        this.onChangedoctor = this.onChangedoctor.bind(this);\r\n        this.onChangemedicine = this.onChangemedicine.bind(this);\r\n        this.onChangedosage = this.onChangedosage.bind(this);\r\n        this.onChangedays = this.onChangedays.bind(this);\r\n        this.onChangeinstructions = this.onChangeinstructions.bind(this);\r\n        this.handleSubmitAdd = this.handleSubmitAdd.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n     \r\n    }\r\n    onChangecontact(e) {\r\n        this.setState({\r\n            contact: e.target.value,\r\n            nameList:[],\r\n            checkName:true\r\n        });\r\n    }\r\n\r\n    onChangedoctor(e) {\r\n        this.setState({\r\n            doctor: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangemedicine(e) {\r\n        this.setState({\r\n            medicine: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedosage(e) {\r\n        this.setState({\r\n            dosage: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedays(e) {\r\n        this.setState({\r\n            days: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeinstructions(e) {\r\n        this.setState({\r\n            instructions: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    handleSubmitAdd(e){\r\n        e.preventDefault();\r\n        console.log(this.state.medicine,this.state.dosage,this.state.days,this.state.timings,this.state.instructions);\r\n        \r\n        var morning = false;\r\n        var afternoon = false;\r\n        var evening = false;\r\n\r\n        for(var i=0;i<this.state.timings.length;i++)\r\n        {   \r\n            if(this.state.timings[i] == \"morning\")\r\n            {\r\n                morning = true;\r\n            }\r\n            else if(this.state.timings[i] == \"noon\")\r\n            {\r\n                afternoon = true;\r\n            }\r\n            else if(this.state.timings[i] == \"evening\")\r\n            {\r\n                evening = true;\r\n            }\r\n        }\r\n\r\n        const item = {\r\n            medicine:this.state.medicine,\r\n            dosage:this.state.dosage,\r\n            days:this.state.days,\r\n            morning:morning,\r\n            afternoon:afternoon,\r\n            evening:evening,\r\n            timings:this.state.timings,\r\n            instructions:this.state.instructions\r\n        }\r\n        this.state.prescriptions.push(item);\r\n        console.log(this.state.prescriptions);\r\n\r\n        this.setState({\r\n            medicine:'',\r\n            dosage:'',\r\n            days:'',\r\n            instructions: '',\r\n            \r\n        });\r\n\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        const obj= {\r\n            contact: this.state.contact,\r\n            name:this.state.name,\r\n            doctor:this.state.doctor,\r\n            prescriptions : this.state.prescriptions\r\n        }\r\n\r\n        console.log(obj)\r\n        \r\n        axios.post('http://localhost:4000/addPrescription', obj)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                if(res.data===\"success\")\r\n                {\r\n                    alert(\"prescription added Successfuly\");\r\n                    this.setState({\r\n                        contact: '',\r\n                        name:'',\r\n                        nameList:[],\r\n                        checkName:true,\r\n                        doctor:'',\r\n                        doctorList:[],\r\n                        checkdoctor:true,\r\n                        showdoctor:false,\r\n                        showMedicine:false,\r\n                        medicine:'',\r\n                        dosage:'',\r\n                        timings:[],\r\n                        instructions:'',\r\n                        prescriptions : [],\r\n                        touched: {\r\n                            contact: false,\r\n                        }\r\n            \r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    alert(res.data);\r\n                }\r\n            });\r\n\r\n\r\n    }\r\n\r\n     \r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n      } \r\n\r\n\r\n    render() {\r\n\r\n        const errors = validate(this.state.contact,this.state.prescriptions);\r\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n\r\n        \r\n        const shouldMarkError = field => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];      \r\n            return hasError ? shouldShow : false;\r\n          };\r\n    \r\n        const createNameElement = () => {\r\n\r\n            if(!Validatephone(this.state.contact))\r\n            {\r\n            \r\n\r\n            const user= {\r\n                contact:this.state.contact,\r\n            }\r\n\r\n            if(this.state.checkName)\r\n            {// to stop useless api calls\r\n                const promise1 = new Promise(function(resolve, reject) {\r\n                    \r\n                    axios.post('http://localhost:4000/getpatients', user)\r\n                    .then(res => {\r\n                        resolve(res.data)\r\n                    });\r\n                });\r\n                \r\n                promise1.then((value) =>{\r\n                    if(value!=\"empty\")\r\n                    this.setState({\r\n                        nameList: value,\r\n                        name:value[0],\r\n                        checkName:false,\r\n                        showdoctor:true,\r\n                        showMedicine:true\r\n                    });\r\n                });\r\n                \r\n            }\r\n\r\n                if(this.state.nameList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Patient:</label>\r\n                                <br></br>\r\n                                <select value={this.state.name} onChange={this.onChangename}>\r\n                                {this.state.nameList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div className=\"invalid-feedback\">\r\n                            No patient exists with this contact.\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }          \r\n         \r\n        const createDoctorElement = () => {\r\n\r\n            if(this.state.showdoctor)\r\n            {\r\n            \r\n\r\n                if(this.state.checkdoctor)\r\n                {// to stop useless api calls\r\n                    const promise1 = new Promise(function(resolve, reject) {\r\n                        \r\n                        axios.post('http://localhost:4000/getdoctors')\r\n                        .then(res => {\r\n                            resolve(res.data)\r\n                        });\r\n                    });\r\n                    \r\n                    promise1.then((value) =>{\r\n                        if(value!=\"empty\")\r\n                        this.setState({\r\n                            doctorList: value,\r\n                            doctor:value[0],\r\n                            checkdoctor:false\r\n                        });\r\n                    });\r\n                    \r\n                }\r\n\r\n                if(this.state.doctorList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Reference Doctor:</label>\r\n                                <br></br>\r\n                                <select value={this.state.doctor} onChange={this.onChangedoctor}>\r\n                                {this.state.doctorList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div>\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }\r\n\r\n        const nameElement = createNameElement(this.state.contact);\r\n        const doctorElement = createDoctorElement();\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                \r\n                    <div>\r\n                    <label>Contact: </label>\r\n                    <input \r\n                            type=\"text\" \r\n                            className={shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\"}\r\n                            value={this.state.contact}\r\n                            onChange={this.onChangecontact}\r\n                            onBlur={this.handleBlur(\"contact\")}\r\n                            />\r\n                            {shouldMarkError(\"contact\") ?\r\n                                <div className=\"invalid-feedback\">\r\n                                    Please provide a valid contact like +921112223456.\r\n                                </div>\r\n                            :\"\"}\r\n\r\n                    </div>\r\n\r\n\r\n                <div>\r\n                {nameElement}\r\n                </div>\r\n                \r\n                <br></br>\r\n\r\n                <div>\r\n                {doctorElement}\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" disabled={isDisabled} style={{marginTop:10}} value=\"Add prescription\" onClick={this.onSubmit} className=\"btn-primary\" />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}