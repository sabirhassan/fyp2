{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-add-prescription.js\";\nimport React, { Component } from 'react';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport Table from 'react-bootstrap/Table';\nimport axios from 'axios';\nimport { Datatable } from \"@o2xp/react-datatable\";\nimport AddIcon from '@material-ui/icons/Add';\n\nfunction Validatephone(contact) {\n  //    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var phoneno = /^\\+?([0-9]{12})\\)?$/;\n\n  if (contact.match(phoneno)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction validate(contact, name) {\n  // true means invalid, so our conditions got reversed\n  return {\n    contact: Validatephone(contact),\n    name: name.length === 0\n  };\n}\n\nvar count = 0;\nvar timings = [\"true\", \"false\"];\nvar id = 0;\nexport default class AddPrescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBlur = field => evt => {\n      this.setState({\n        touched: { ...this.state.touched,\n          [field]: true\n        }\n      });\n    };\n\n    this.actionsRow = ({\n      type,\n      payload\n    }) => {\n      console.log(type);\n      console.log(payload);\n\n      if (type === \"delete\") {\n        console.log(\"befor\", this.state.data);\n        var list = this.state.data;\n\n        for (var i = 0; i < list.length; i++) {\n          if (list[i][\"id\"] === payload.id) {\n            list.splice(i, 1);\n          }\n\n          this.setState({\n            data: list\n          });\n        }\n\n        console.log(\"after\", this.state.data);\n      } else if (type === \"save\") {\n        console.log(\"befor\", this.state.data);\n        var list = this.state.data;\n\n        for (var i = 0; i < list.length; i++) {\n          if (list[i][\"id\"] == payload.id) {\n            list[i][\"medicine\"] = payload[\"medicine\"];\n            list[i][\"dosage\"] = payload[\"dosage\"];\n            list[i][\"days\"] = payload[\"days\"];\n            list[i][\"morning\"] = payload[\"morning\"];\n            list[i][\"afternoon\"] = payload[\"afternoon\"];\n            list[i][\"evening\"] = payload[\"evening\"];\n            list[i][\"instructions\"] = payload[\"instructions\"];\n          }\n\n          this.setState({\n            data: list\n          });\n        }\n\n        console.log(\"after\", this.state.data);\n      }\n    };\n\n    this.addRow = () => {\n      console.log(\"add row\");\n      var l = this.state.data;\n      var d = {\n        id: id++,\n        medicine: '',\n        dosage: '',\n        days: 5,\n        morning: timings[0],\n        afternoon: timings[0],\n        evening: timings[0],\n        instructions: \"\"\n      };\n      l.push(d);\n      this.setState({\n        data: l\n      });\n    };\n\n    this.updateoptions = () => {\n      if (this.state.gotData == false) {\n        console.log(count++);\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/getMedicines').then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          if (value != \"empty\") {\n            let list = [];\n\n            for (var i = 0; i < value.length; i++) {\n              let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"];\n              list.push(n);\n            }\n\n            console.log(list);\n            this.setState({\n              medicineList: list,\n              gotData: true,\n              options: {\n                title: \"prescription datatable\",\n                dimensions: {\n                  datatable: {\n                    width: \"100%\",\n                    height: \"480px\"\n                  },\n                  row: {\n                    height: \"48px\"\n                  }\n                },\n                keyColumn: \"id\",\n                font: \"Arial\",\n                data: {\n                  columns: [{\n                    id: \"id\",\n                    label: \"id\",\n                    colSize: \"150px\",\n                    editable: false\n                  }, {\n                    id: \"medicine\",\n                    label: \"medicine\",\n                    colSize: \"150px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: list\n                  }, {\n                    id: \"dosage\",\n                    label: \"dosage\",\n                    colSize: \"150px\",\n                    editable: true,\n                    inputType: \"input\",\n                    dataType: \"text\"\n                  }, {\n                    id: \"days\",\n                    label: \"days\",\n                    colSize: \"80px\",\n                    editable: true,\n                    dataType: \"number\",\n                    valueVerification: val => {\n                      let error = val > 100 ? true : false;\n                      let message = val > 100 ? \"Value is too big\" : \"\";\n                      return {\n                        error: error,\n                        message: message\n                      };\n                    }\n                  }, {\n                    id: \"morning\",\n                    label: \"morning\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"afternoon\",\n                    label: \"afternoon\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"evening\",\n                    label: \"evening\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"instructions\",\n                    label: \"instructions\",\n                    colSize: \"100px\",\n                    editable: true,\n                    dataType: \"text\",\n                    inputType: \"input\"\n                  }],\n                  rows: this.state.data\n                },\n                features: {\n                  canEdit: true,\n                  canDelete: true,\n                  canSearch: true,\n                  canOrderColumns: true,\n                  additionalIcons: [{\n                    title: \"Add medicine\",\n                    icon: React.createElement(AddIcon, {\n                      color: \"primary\",\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 331\n                      },\n                      __self: this\n                    }),\n                    onClick: () => {\n                      this.addRow();\n                    }\n                  }]\n                }\n              }\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      contact: '',\n      name: '',\n      doctor: '',\n      doctorList: [],\n      checkdoctor: true,\n      showdoctor: false,\n      showMedicine: false,\n      data: [],\n      options: {},\n      gotData: false,\n      medicineList: [],\n      touched: {\n        contact: false\n      }\n    };\n    this.onChangecontact = this.onChangecontact.bind(this);\n    this.onChangedoctor = this.onChangedoctor.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChangecontact(e) {\n    this.setState({\n      contact: e.target.value,\n      nameList: [],\n      checkName: true,\n      name: ''\n    });\n  }\n\n  onChangedoctor(e) {\n    this.setState({\n      doctor: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      contact: this.state.contact,\n      name: this.state.name,\n      doctor: this.state.doctor,\n      prescriptions: this.state.data\n    };\n    var l = this.state.data;\n\n    for (var i = 0; i < l.length; i++) {\n      if (l[i][\"medicine\"].length === 0 || l[i][\"dosage\"].length === 0) {\n        alert(\"some important information is missing\");\n        return;\n      }\n    }\n\n    console.log(obj);\n    axios.post('http://localhost:4000/addPrescription', obj).then(res => {\n      console.log(res.data);\n\n      if (res.data === \"success\") {\n        alert(\"prescription added Successfuly\");\n        this.setState({\n          contact: '',\n          name: '',\n          doctor: '',\n          doctorList: [],\n          checkdoctor: true,\n          showdoctor: false,\n          showMedicine: false,\n          data: [],\n          options: {},\n          gotData: false,\n          medicineList: [],\n          touched: {\n            contact: false\n          }\n        });\n      } else {\n        alert(res.data);\n      }\n    });\n  }\n\n  render() {\n    const errors = validate(this.state.contact, this.state.name);\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\n\n    const shouldMarkError = field => {\n      const hasError = errors[field];\n      const shouldShow = this.state.touched[field];\n      return hasError ? shouldShow : false;\n    };\n\n    const createNameElement = () => {\n      if (!Validatephone(this.state.contact)) {\n        const user = {\n          contact: this.state.contact\n        };\n\n        if (this.state.checkName) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getpatients', user).then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              nameList: value,\n              name: value[0],\n              checkName: false,\n              showdoctor: true,\n              showMedicine: true\n            });\n          });\n        }\n\n        if (this.state.nameList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 397\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 398\n            },\n            __self: this\n          }, \"Select Patient:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 399\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.name,\n            onChange: this.onChangename,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 400\n            },\n            __self: this\n          }, this.state.nameList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            className: \"invalid-feedback\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 410\n            },\n            __self: this\n          }, \"No patient exists with this contact.\");\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createDoctorElement = () => {\n      if (this.state.showdoctor) {\n        if (this.state.checkdoctor) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getdoctors').then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              doctorList: value,\n              doctor: value[0],\n              checkdoctor: false\n            });\n          });\n        }\n\n        if (this.state.doctorList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 457\n            },\n            __self: this\n          }, \"Select Reference Doctor:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.doctor,\n            onChange: this.onChangedoctor,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 459\n            },\n            __self: this\n          }, this.state.doctorList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 460\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 469\n            },\n            __self: this\n          });\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createTableElement = () => {\n      this.updateoptions();\n      return React.createElement(\"div\", {\n        style: {\n          marginTop: 10,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }, \"Medicine List\"), React.createElement(Datatable, {\n        options: this.state.options,\n        actions: this.actionsRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }));\n    };\n\n    const nameElement = createNameElement(this.state.contact);\n    const doctorElement = createDoctorElement();\n    const Table = createTableElement();\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"Contact: \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\",\n      value: this.state.contact,\n      onChange: this.onChangecontact,\n      onBlur: this.handleBlur(\"contact\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), shouldMarkError(\"contact\") ? React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"Please provide a valid contact like +921112223456.\") : \"\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, nameElement), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, doctorElement), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, Table), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      disabled: isDisabled,\n      style: {\n        marginTop: 10\n      },\n      value: \"Add prescription\",\n      onClick: this.onSubmit,\n      className: \"btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-add-prescription.js"],"names":["React","Component","Multiselect","Table","axios","Datatable","AddIcon","Validatephone","contact","phoneno","match","validate","name","length","count","timings","id","AddPrescription","constructor","props","handleBlur","field","evt","setState","touched","state","actionsRow","type","payload","console","log","data","list","i","splice","addRow","l","d","medicine","dosage","days","morning","afternoon","evening","instructions","push","updateoptions","gotData","promise1","Promise","resolve","reject","post","then","res","value","n","medicineList","options","title","dimensions","datatable","width","height","row","keyColumn","font","columns","label","colSize","editable","inputType","values","dataType","valueVerification","val","error","message","rows","features","canEdit","canDelete","canSearch","canOrderColumns","additionalIcons","icon","onClick","doctor","doctorList","checkdoctor","showdoctor","showMedicine","onChangecontact","bind","onChangedoctor","onSubmit","e","target","nameList","checkName","preventDefault","obj","prescriptions","alert","render","errors","isDisabled","Object","keys","some","x","shouldMarkError","hasError","shouldShow","createNameElement","user","onChangename","map","createDoctorElement","createTableElement","marginTop","zIndex","nameElement","doctorElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Table from 'react-bootstrap/Table'\r\nimport axios from 'axios';\r\nimport {Datatable} from \"@o2xp/react-datatable\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nfunction Validatephone(contact) \r\n{\r\n//    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    var phoneno = /^\\+?([0-9]{12})\\)?$/;\r\n    if(contact.match(phoneno))\r\n    {\r\n    return false;\r\n    }\r\n    else\r\n    {\r\n    return true;\r\n    }\r\n}\r\n\r\nfunction validate(contact,name) {\r\n    // true means invalid, so our conditions got reversed\r\n    return {\r\n       contact: Validatephone(contact),\r\n       name:name.length===0\r\n    };\r\n}\r\n\r\nvar count = 0\r\nvar timings=[\"true\",\"false\"]\r\nvar id = 0\r\n\r\n\r\nexport default class AddPrescription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            contact: '',\r\n            name:'',\r\n            doctor:'',\r\n            doctorList:[],\r\n            checkdoctor:true,\r\n            showdoctor:false,\r\n            showMedicine:false,\r\n            data:[],\r\n            options:{},\r\n            gotData:false,\r\n            medicineList:[],\r\n            touched: {\r\n                contact: false,\r\n              }\r\n            \r\n        }\r\n        this.onChangecontact = this.onChangecontact.bind(this);\r\n        this.onChangedoctor = this.onChangedoctor.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n     \r\n    }\r\n    onChangecontact(e) {\r\n        this.setState({\r\n            contact: e.target.value,\r\n            nameList:[],\r\n            checkName:true,\r\n            name:''\r\n        });\r\n    }\r\n\r\n    onChangedoctor(e) {\r\n        this.setState({\r\n            doctor: e.target.value\r\n        });\r\n    }\r\n\r\n \r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        const obj= {\r\n            contact: this.state.contact,\r\n            name:this.state.name,\r\n            doctor:this.state.doctor,\r\n            prescriptions : this.state.data\r\n        }\r\n\r\n        var l = this.state.data\r\n        for(var i=0;i<l.length;i++)\r\n        {\r\n            if(l[i][\"medicine\"].length===0 || l[i][\"dosage\"].length===0)\r\n            {\r\n                alert(\"some important information is missing\")\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(obj)\r\n        \r\n        axios.post('http://localhost:4000/addPrescription', obj)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                if(res.data===\"success\")\r\n                {\r\n                    alert(\"prescription added Successfuly\");\r\n                    this.setState({\r\n                        contact: '',\r\n                        name:'',\r\n                        doctor:'',\r\n                        doctorList:[],\r\n                        checkdoctor:true,\r\n                        showdoctor:false,\r\n                        showMedicine:false,\r\n                        data:[],\r\n                        options:{},\r\n                        gotData:false,\r\n                        medicineList:[],\r\n                        touched: {\r\n                            contact: false,\r\n                          }\r\n            \r\n            \r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    alert(res.data);\r\n                }\r\n            });\r\n\r\n\r\n    }\r\n\r\n     \r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n      } \r\n\r\n\r\n    actionsRow = ({ type, payload }) => {\r\n        console.log(type);\r\n        console.log(payload);\r\n        if(type===\"delete\")\r\n        {       \r\n            console.log(\"befor\",this.state.data)\r\n            var list = this.state.data\r\n            for( var i = 0; i < list.length; i++){ \r\n                \r\n                if ( list[i][\"id\"] === payload.id) { \r\n                    list.splice(i, 1); \r\n                }\r\n                this.setState({\r\n                data:list\r\n                })\r\n        \r\n            }\r\n            console.log(\"after\",this.state.data)\r\n        }\r\n        else if(type===\"save\")\r\n        {\r\n            console.log(\"befor\",this.state.data)\r\n            var list = this.state.data\r\n            for( var i = 0; i < list.length; i++){ \r\n                \r\n                if ( list[i][\"id\"] == payload.id) { \r\n                    list[i][\"medicine\"] = payload[\"medicine\"]\r\n                    list[i][\"dosage\"] = payload[\"dosage\"]\r\n                    list[i][\"days\"] = payload[\"days\"]\r\n                    list[i][\"morning\"] = payload[\"morning\"]\r\n                    list[i][\"afternoon\"] = payload[\"afternoon\"]\r\n                    list[i][\"evening\"] = payload[\"evening\"]\r\n                    list[i][\"instructions\"] = payload[\"instructions\"]\r\n                }\r\n                this.setState({\r\n                data:list\r\n                })\r\n        \r\n            }\r\n            console.log(\"after\",this.state.data)\r\n        \r\n        }\r\n    };\r\n\r\n    addRow = ()=>{\r\n        console.log(\"add row\")\r\n        var l = this.state.data\r\n        var d = {\r\n            id:id++,\r\n            medicine: '',\r\n            dosage:'',\r\n            days: 5,\r\n            morning: timings[0],\r\n            afternoon: timings[0],\r\n            evening: timings[0],\r\n            instructions: \"\",\r\n          }\r\n        l.push(d)\r\n        this.setState({\r\n            data:l\r\n        })\r\n    }\r\n\r\n\r\n    updateoptions = ()=>\r\n    {\r\n\r\n      if(this.state.gotData==false)\r\n      {\r\n        console.log(count++)\r\n\r\n        const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n        axios.post('http://localhost:4000/getMedicines',)\r\n        .then(res => {\r\n            resolve(res.data)\r\n          });\r\n        });\r\n      \r\n        promise1.then((value) =>{\r\n            if(value!=\"empty\")\r\n            {\r\n\r\n                let list = []\r\n                for(var i=0;i<value.length;i++)\r\n                {\r\n                    let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"]\r\n                    list.push(n)\r\n                }\r\n                console.log(list)\r\n\r\n                this.setState({\r\n                    medicineList: list,\r\n                    gotData:true,\r\n                    options : {\r\n                        title: \"prescription datatable\",\r\n                        dimensions: {\r\n                          datatable: {\r\n                            width: \"100%\",\r\n                            height: \"480px\"\r\n                          },\r\n                          row: {\r\n                            height: \"48px\"\r\n                          }\r\n                        },\r\n                        keyColumn: \"id\",\r\n                        font: \"Arial\",\r\n                        data: {\r\n                          columns: [\r\n                            {\r\n                                id: \"id\",\r\n                                label: \"id\",\r\n                                colSize: \"150px\",\r\n                                editable: false\r\n                            },\r\n                            {\r\n                              id: \"medicine\",\r\n                              label: \"medicine\",\r\n                              colSize: \"150px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: list\r\n                            },\r\n                            {\r\n                                id: \"dosage\",\r\n                                label: \"dosage\",\r\n                                colSize: \"150px\",\r\n                                editable: true,\r\n                                inputType: \"input\",\r\n                                dataType: \"text\"\r\n                            },\r\n                            {\r\n                              id: \"days\",\r\n                              label: \"days\",\r\n                              colSize: \"80px\",\r\n                              editable: true,\r\n                              dataType: \"number\",\r\n                              valueVerification: val => {\r\n                                let error = val > 100 ? true : false;\r\n                                let message = val > 100 ? \"Value is too big\" : \"\";\r\n                                return {\r\n                                  error: error,\r\n                                  message: message\r\n                                };\r\n                              }\r\n                            },\r\n                            {\r\n                              id: \"morning\",\r\n                              label: \"morning\",\r\n                              colSize: \"50px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: timings\r\n                            },\r\n                            {\r\n                                id: \"afternoon\",\r\n                                label: \"afternoon\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"evening\",\r\n                                label: \"evening\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"instructions\",\r\n                                label: \"instructions\",\r\n                                colSize: \"100px\",\r\n                                editable: true,\r\n                                dataType: \"text\",\r\n                                inputType: \"input\"\r\n                            }\r\n                          ],\r\n                          rows: this.state.data\r\n                        },\r\n                        features: {\r\n                          canEdit: true,\r\n                          canDelete: true,\r\n                          canSearch: true,\r\n                          canOrderColumns: true,\r\n                          additionalIcons: [\r\n                            {\r\n                              title: \"Add medicine\",\r\n                              icon: <AddIcon color=\"primary\" />,\r\n                              onClick: () => {this.addRow()}\r\n                            }\r\n                          ],\r\n                        }\r\n                      }\r\n            \r\n                });\r\n            }\r\n        });\r\n\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        const errors = validate(this.state.contact,this.state.name);\r\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n\r\n        \r\n        const shouldMarkError = field => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];      \r\n            return hasError ? shouldShow : false;\r\n          };\r\n    \r\n        const createNameElement = () => {\r\n\r\n            if(!Validatephone(this.state.contact))\r\n            {\r\n            \r\n\r\n            const user= {\r\n                contact:this.state.contact,\r\n            }\r\n\r\n            if(this.state.checkName)\r\n            {// to stop useless api calls\r\n                const promise1 = new Promise(function(resolve, reject) {\r\n                    \r\n                    axios.post('http://localhost:4000/getpatients', user)\r\n                    .then(res => {\r\n                        resolve(res.data)\r\n                    });\r\n                });\r\n                \r\n                promise1.then((value) =>{\r\n                    if(value!=\"empty\")\r\n                    this.setState({\r\n                        nameList: value,\r\n                        name:value[0],\r\n                        checkName:false,\r\n                        showdoctor:true,\r\n                        showMedicine:true\r\n                    });\r\n                });\r\n                \r\n            }\r\n\r\n                if(this.state.nameList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Patient:</label>\r\n                                <br></br>\r\n                                <select value={this.state.name} onChange={this.onChangename}>\r\n                                {this.state.nameList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div className=\"invalid-feedback\">\r\n                            No patient exists with this contact.\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }          \r\n         \r\n        const createDoctorElement = () => {\r\n\r\n            if(this.state.showdoctor)\r\n            {\r\n            \r\n\r\n                if(this.state.checkdoctor)\r\n                {// to stop useless api calls\r\n                    const promise1 = new Promise(function(resolve, reject) {\r\n                        \r\n                        axios.post('http://localhost:4000/getdoctors')\r\n                        .then(res => {\r\n                            resolve(res.data)\r\n                        });\r\n                    });\r\n                    \r\n                    promise1.then((value) =>{\r\n                        if(value!=\"empty\")\r\n                        this.setState({\r\n                            doctorList: value,\r\n                            doctor:value[0],\r\n                            checkdoctor:false\r\n                        });\r\n                    });\r\n                    \r\n                }\r\n\r\n                if(this.state.doctorList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Reference Doctor:</label>\r\n                                <br></br>\r\n                                <select value={this.state.doctor} onChange={this.onChangedoctor}>\r\n                                {this.state.doctorList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div>\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }\r\n\r\n        const createTableElement = () => {\r\n\r\n            this.updateoptions()\r\n            return(\r\n            <div style={{marginTop: 10,zIndex:1}}>\r\n            <h3>Medicine List</h3>\r\n            <Datatable\r\n            options={this.state.options}\r\n            actions={this.actionsRow}\r\n            />\r\n\r\n            </div>\r\n            )\r\n    }\r\n\r\n        const nameElement = createNameElement(this.state.contact);\r\n        const doctorElement = createDoctorElement();\r\n        const Table = createTableElement();\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                \r\n                    <div>\r\n                    <label>Contact: </label>\r\n                    <input \r\n                            type=\"text\" \r\n                            className={shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\"}\r\n                            value={this.state.contact}\r\n                            onChange={this.onChangecontact}\r\n                            onBlur={this.handleBlur(\"contact\")}\r\n                            />\r\n                            {shouldMarkError(\"contact\") ?\r\n                                <div className=\"invalid-feedback\">\r\n                                    Please provide a valid contact like +921112223456.\r\n                                </div>\r\n                            :\"\"}\r\n\r\n                    </div>\r\n\r\n\r\n                <div>\r\n                {nameElement}\r\n                </div>\r\n                \r\n                <br></br>\r\n\r\n                <div>\r\n                {doctorElement}\r\n                </div>\r\n\r\n\r\n                <div>\r\n                {Table}\r\n                </div>\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" disabled={isDisabled} style={{marginTop:10}} value=\"Add prescription\" onClick={this.onSubmit} className=\"btn-primary\" />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}