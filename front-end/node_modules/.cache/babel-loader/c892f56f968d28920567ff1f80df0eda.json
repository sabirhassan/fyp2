{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-medicines.js\";\nimport React, { Component } from 'react';\nimport { Datatable } from \"@o2xp/react-datatable\";\nimport axios from 'axios';\nimport AddIcon from '@material-ui/icons/Add';\nimport '../index.css';\nlet option = {\n  title: \"My super datatable\",\n  dimensions: {\n    datatable: {\n      width: \"90%\",\n      height: \"40%\"\n    },\n    row: {\n      height: \"48px\"\n    }\n  },\n  keyColumn: \"id\",\n  font: \"Arial\",\n  data: {\n    columns: [{\n      id: \"id\",\n      label: \"id\",\n      colSize: \"150px\",\n      editable: false\n    }, {\n      id: \"Drug Name\",\n      label: \"Name\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }, {\n      id: \"Form\",\n      label: \"Form\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }, {\n      id: \"Strength\",\n      label: \"Strength\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }, {\n      id: \"Active Ingredient\",\n      label: \"Active Ingredient\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }],\n    rows: []\n  },\n  features: {\n    canEdit: true,\n    canDelete: true,\n    canSearch: true,\n    canOrderColumns: true,\n    canSelectRow: true,\n    rowsPerPage: {\n      available: [10, 25, 50, 100],\n      selected: 50\n    }\n  }\n};\nvar count = 0;\nexport default class medicineList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.togglePop = () => {\n      console.log(\"toggle pop\");\n      this.setState({\n        seen: !this.state.seen\n      });\n    };\n\n    this.actionsRow = ({\n      type,\n      payload\n    }) => {\n      console.log(type);\n      console.log(payload);\n\n      if (type === \"delete\") {\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/deleteMedicine', obj).then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          alert(value);\n          console.log(value);\n        });\n      }\n    };\n\n    this.updateoptions = () => {\n      if (this.state.gotData == false) {\n        console.log(count++);\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/getMedicines').then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          if (value != \"empty\") this.setState({\n            data: value,\n            gotData: true,\n            options: {\n              title: \"Medicine dataTable\",\n              dimensions: {\n                datatable: {\n                  width: \"90%\",\n                  height: \"150%\"\n                },\n                row: {\n                  height: \"48px\"\n                }\n              },\n              keyColumn: \"id\",\n              font: \"Arial\",\n              data: {\n                columns: [{\n                  id: \"id\",\n                  label: \"id\",\n                  colSize: \"150px\",\n                  editable: false\n                }, {\n                  id: \"Drug Name\",\n                  label: \"Name\",\n                  colSize: \"100px\",\n                  editable: true,\n                  dataType: \"text\",\n                  inputType: \"input\"\n                }, {\n                  id: \"Form\",\n                  label: \"Form\",\n                  colSize: \"100px\",\n                  editable: true,\n                  dataType: \"text\",\n                  inputType: \"input\"\n                }, {\n                  id: \"Strength\",\n                  label: \"Strength\",\n                  colSize: \"100px\",\n                  editable: true,\n                  dataType: \"text\",\n                  inputType: \"input\"\n                }, {\n                  id: \"Active Ingredient\",\n                  label: \"Active Ingredient\",\n                  colSize: \"100px\",\n                  editable: true,\n                  dataType: \"text\",\n                  inputType: \"input\"\n                }],\n                rows: value\n              },\n              features: {\n                canEdit: true,\n                canDelete: true,\n                canSearch: true,\n                canOrderColumns: true,\n                canSelectRow: true,\n                rowsPerPage: {\n                  available: [10, 25, 50, 100],\n                  selected: 50\n                },\n                additionalIcons: [{\n                  title: \"Add Medicine\",\n                  icon: React.createElement(AddIcon, {\n                    color: \"primary\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 298\n                    },\n                    __self: this\n                  }),\n                  onClick: () => {\n                    this.togglePop();\n                  }\n                }]\n              }\n            }\n          });\n        });\n      }\n    };\n\n    this.state = {\n      gotData: false,\n      data: [],\n      options: {},\n      name: '',\n      form: '',\n      ingredient: '',\n      strength: '',\n      seen: false\n    };\n    this.onChangename = this.onChangename.bind(this);\n    this.onChangeform = this.onChangeform.bind(this);\n    this.onChangestrength = this.onChangestrength.bind(this);\n    this.onChangeingredient = this.onChangeingredient.bind(this);\n    this.onSubmitModal = this.onSubmitModal.bind(this);\n    this.togglePop = this.togglePop.bind(this);\n  }\n\n  onChangename(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  onChangeform(e) {\n    this.setState({\n      form: e.target.value\n    });\n  }\n\n  onChangestrength(e) {\n    this.setState({\n      strength: e.target.value\n    });\n  }\n\n  onChangeingredient(e) {\n    this.setState({\n      ingredient: e.target.value\n    });\n  }\n\n  onSubmitModal(evt) {\n    evt.preventDefault();\n    const med = this.state.data.some(item => item[\"Drug Name\"] === this.state.name && item[\"Drug Name\"] === this.state.name && item[\"Form\"] === this.state.form && item[\"Strength\"] === this.state.strength && item[\"Active Ingredient\"] === this.state.ingredient);\n    console.log(med);\n    var list = this.state.data;\n\n    if (!med) {\n      let obj = {\n        'id': '0',\n        'Drug Name': this.state.name,\n        'Form': this.state.form,\n        'Strength': this.state.strength,\n        'Active Ingredient': this.state.ingredient\n      };\n      const promise1 = new Promise(function (resolve, reject) {\n        axios.post('http://localhost:4000/addMedicine', obj).then(res => {\n          resolve(res.data);\n        });\n      });\n      promise1.then(value => {\n        alert(value);\n\n        if (value === \"success\") {\n          list.push(obj);\n          this.setState({\n            data: list,\n            seen: false\n          });\n        }\n      });\n    } else {\n      alert(\"this item already exists\");\n    }\n  }\n\n  render() {\n    const createTableElement = () => {\n      this.updateoptions();\n      return React.createElement(\"div\", {\n        style: {\n          marginTop: 10,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"Medicine List\"), React.createElement(Datatable, {\n        options: this.state.options,\n        actions: this.actionsRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }));\n    };\n\n    const createMedicineElement = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"popup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"close\",\n        onClick: this.togglePop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, \"\\xD7\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmitModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"Add Medicine Data!\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Drug Name\",\n        required: true,\n        value: this.state.name,\n        onChange: this.onChangename,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Form\",\n        required: true,\n        value: this.state.form,\n        onChange: this.onChangeform,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Strength\",\n        required: true,\n        value: this.state.strength,\n        onChange: this.onChangestrength,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Active Ingredient\",\n        required: true,\n        value: this.state.ingredient,\n        onChange: this.onChangeingredient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      })))));\n    };\n\n    const Table = createTableElement();\n    const addMedicineElement = createMedicineElement();\n    return React.createElement(\"div\", {\n      className: \"base\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, Table), React.createElement(\"div\", {\n      style: this.state.seen ? {\n        display: 'block'\n      } : {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, addMedicineElement));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-medicines.js"],"names":["React","Component","Datatable","axios","AddIcon","option","title","dimensions","datatable","width","height","row","keyColumn","font","data","columns","id","label","colSize","editable","dataType","inputType","rows","features","canEdit","canDelete","canSearch","canOrderColumns","canSelectRow","rowsPerPage","available","selected","count","medicineList","constructor","props","togglePop","console","log","setState","seen","state","actionsRow","type","payload","promise1","Promise","resolve","reject","post","obj","then","res","value","alert","updateoptions","gotData","options","additionalIcons","icon","onClick","name","form","ingredient","strength","onChangename","bind","onChangeform","onChangestrength","onChangeingredient","onSubmitModal","e","target","evt","preventDefault","med","some","item","list","push","render","createTableElement","marginTop","zIndex","createMedicineElement","Table","addMedicineElement","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport {Datatable} from \"@o2xp/react-datatable\";\r\nimport axios from 'axios';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport '../index.css';\r\n\r\n\r\nlet option = {\r\n    title: \"My super datatable\",\r\n    dimensions: {\r\n      datatable: {\r\n        width: \"90%\",\r\n        height: \"40%\"\r\n      },\r\n      row: {\r\n        height: \"48px\"\r\n      }\r\n    },\r\n    keyColumn: \"id\",\r\n    font: \"Arial\",\r\n    data: {\r\n      columns: [\r\n        {\r\n            id: \"id\",\r\n            label: \"id\",\r\n            colSize: \"150px\",\r\n            editable: false\r\n        },\r\n        {\r\n            id: \"Drug Name\",\r\n            label: \"Name\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        },\r\n        {\r\n            id: \"Form\",\r\n            label: \"Form\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        },\r\n        {\r\n            id: \"Strength\",\r\n            label: \"Strength\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        },\r\n        {\r\n            id: \"Active Ingredient\",\r\n            label: \"Active Ingredient\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        },\r\n      \r\n        ],\r\n\r\n      rows: []\r\n    },\r\n    features: {\r\n      canEdit: true,\r\n      canDelete: true,\r\n      canSearch: true,\r\n      canOrderColumns: true,\r\n      canSelectRow: true,\r\n      rowsPerPage: {\r\n        available: [10, 25, 50, 100],\r\n        selected: 50\r\n      },\r\n    }\r\n  };\r\n\r\nvar count = 0\r\n\r\nexport default class medicineList extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gotData:false,\r\n            data:[],\r\n            options:{},\r\n            name:'',\r\n            form:'',\r\n            ingredient:'',\r\n            strength:'',\r\n            seen: false,     \r\n        }\r\n        this.onChangename = this.onChangename.bind(this)\r\n        this.onChangeform = this.onChangeform.bind(this)\r\n        this.onChangestrength = this.onChangestrength.bind(this)\r\n        this.onChangeingredient = this.onChangeingredient.bind(this)\r\n        this.onSubmitModal = this.onSubmitModal.bind(this)\r\n        this.togglePop = this.togglePop.bind(this)\r\n        \r\n    }\r\n    \r\n    onChangename(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    onChangeform(e) {\r\n      this.setState({\r\n          form: e.target.value\r\n      });\r\n    }\r\n\r\n    onChangestrength(e) {\r\n      this.setState({\r\n          strength: e.target.value\r\n      });\r\n    }\r\n\r\n    onChangeingredient(e) {\r\n      this.setState({\r\n          ingredient: e.target.value\r\n      });\r\n    }\r\n\r\n    onSubmitModal(evt) {\r\n      evt.preventDefault();\r\n\r\n      const med = this.state.data.some(item => item[\"Drug Name\"] === this.state.name && item[\"Drug Name\"] === this.state.name && item[\"Form\"] === this.state.form && item[\"Strength\"] === this.state.strength && item[\"Active Ingredient\"] === this.state.ingredient);\r\n      console.log(med);\r\n\r\n\r\n\r\n      var list = this.state.data\r\n      if(!med)\r\n      {\r\n        let obj = {\r\n          'id':'0',\r\n          'Drug Name':this.state.name,\r\n          'Form':this.state.form,\r\n          'Strength':this.state.strength,\r\n          'Active Ingredient':this.state.ingredient\r\n        }\r\n\r\n        const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n          axios.post('http://localhost:4000/addMedicine',obj)\r\n          .then(res => {\r\n              resolve(res.data)\r\n            });\r\n          });\r\n        \r\n          promise1.then((value) =>{\r\n            alert(value)  \r\n            if(value===\"success\")\r\n              {\r\n                \r\n                list.push(obj)\r\n                this.setState({\r\n                  data:list,\r\n                  seen: false,\r\n                  });\r\n              }\r\n          });\r\n\r\n      }\r\n      else\r\n      {\r\n        alert(\"this item already exists\")\r\n      }\r\n\r\n    }\r\n  \r\n    togglePop = () => {\r\n      console.log(\"toggle pop\")\r\n      this.setState({\r\n        seen: !this.state.seen\r\n      });\r\n    };\r\n\r\n    actionsRow = ({ type, payload }) => {\r\n        console.log(type);\r\n        console.log(payload);\r\n        if(type===\"delete\")\r\n        {\r\n          const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n            axios.post('http://localhost:4000/deleteMedicine',obj)\r\n            .then(res => {\r\n                resolve(res.data)\r\n              });\r\n            });\r\n          \r\n            promise1.then((value) =>{\r\n              alert(value)\r\n              console.log(value)  \r\n            });\r\n        }\r\n    };\r\n    \r\n\r\n    updateoptions = ()=>\r\n    {\r\n\r\n      if(this.state.gotData==false)\r\n      {\r\n        console.log(count++)\r\n\r\n        const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n        axios.post('http://localhost:4000/getMedicines',)\r\n        .then(res => {\r\n            resolve(res.data)\r\n          });\r\n        });\r\n      \r\n        promise1.then((value) =>{\r\n            if(value!=\"empty\")\r\n            this.setState({\r\n                data: value,\r\n                gotData:true,\r\n                options : {\r\n                  title: \"Medicine dataTable\",\r\n                  dimensions: {\r\n                    datatable: {\r\n                      width: \"90%\",\r\n                      height: \"150%\"\r\n                    },\r\n                    row: {\r\n                      height: \"48px\"\r\n                    }\r\n                  },\r\n                  keyColumn: \"id\",\r\n                  font: \"Arial\",\r\n                  data: {\r\n                    columns: [\r\n                      {\r\n                          id: \"id\",\r\n                          label: \"id\",\r\n                          colSize: \"150px\",\r\n                          editable: false\r\n                      },\r\n                      {\r\n                          id: \"Drug Name\",\r\n                          label: \"Name\",\r\n                          colSize: \"100px\",\r\n                          editable: true,\r\n                          dataType: \"text\",\r\n                          inputType: \"input\"\r\n                      },\r\n                      {\r\n                          id: \"Form\",\r\n                          label: \"Form\",\r\n                          colSize: \"100px\",\r\n                          editable: true,\r\n                          dataType: \"text\",\r\n                          inputType: \"input\"\r\n                      },\r\n                      {\r\n                          id: \"Strength\",\r\n                          label: \"Strength\",\r\n                          colSize: \"100px\",\r\n                          editable: true,\r\n                          dataType: \"text\",\r\n                          inputType: \"input\"\r\n                      },\r\n                      {\r\n                          id: \"Active Ingredient\",\r\n                          label: \"Active Ingredient\",\r\n                          colSize: \"100px\",\r\n                          editable: true,\r\n                          dataType: \"text\",\r\n                          inputType: \"input\"\r\n                      },\r\n                    \r\n                      ],\r\n          \r\n                    rows: value\r\n                  },\r\n                  features: {\r\n                    canEdit: true,\r\n                    canDelete: true,\r\n                    canSearch: true,\r\n                    canOrderColumns: true,\r\n                    canSelectRow: true,\r\n                    rowsPerPage: {\r\n                      available: [10, 25, 50, 100],\r\n                      selected: 50\r\n                    },\r\n                    additionalIcons: [\r\n                      {\r\n                        title: \"Add Medicine\",\r\n                        icon: <AddIcon color=\"primary\" />,\r\n                        onClick: () => {this.togglePop()}\r\n                      }\r\n                    ]\r\n                  }\r\n                }\r\n              });\r\n        });\r\n\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    render() {\r\n\r\n        const createTableElement = () => {\r\n\r\n                this.updateoptions()\r\n                return(\r\n                <div style={{marginTop: 10,zIndex:1}}>\r\n                <h3>Medicine List</h3>\r\n                <Datatable\r\n                options={this.state.options}\r\n                actions={this.actionsRow}\r\n                />\r\n\r\n                </div>\r\n                )\r\n        }\r\n\r\n        const createMedicineElement = () => {\r\n\r\n          return(\r\n            <div>\r\n            <div className=\"popup\">\r\n              <div className=\"content\">\r\n              <span className=\"close\" onClick={this.togglePop}>\r\n                &times;\r\n              </span>\r\n              <form onSubmit={this.onSubmitModal}>\r\n                <h3>Add Medicine Data!</h3>\r\n                <br />  \r\n                <input \r\n                  type=\"text\" \r\n                  className=\"form-control\"\r\n                  placeholder=\"Drug Name\"\r\n                  required\r\n                  value={this.state.name}\r\n                  onChange={this.onChangename}\r\n                  />\r\n\r\n                <br />\r\n                <input \r\n                type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"Form\"\r\n                required\r\n                value={this.state.form}\r\n                onChange={this.onChangeform}\r\n                />\r\n\r\n                <br />\r\n                <input \r\n                type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"Strength\"\r\n                required\r\n                value={this.state.strength}\r\n                onChange={this.onChangestrength}\r\n                />\r\n\r\n                <br />\r\n                <input \r\n                type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"Active Ingredient\"\r\n                required\r\n                value={this.state.ingredient}\r\n                onChange={this.onChangeingredient}\r\n                />\r\n\r\n                <br />\r\n                <input type=\"submit\" />\r\n              </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n\r\n          )\r\n      }\r\n\r\n\r\n        const Table = createTableElement();\r\n\r\n        const addMedicineElement = createMedicineElement();\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"base\">\r\n\r\n\r\n              <div className=\"table\">\r\n              {Table}\r\n              </div>\r\n\r\n\r\n              <div style={this.state.seen ? {display:'block'}:{display:'none'}}>\r\n              {addMedicineElement}\r\n              </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}