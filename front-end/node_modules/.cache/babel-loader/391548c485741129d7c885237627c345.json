{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatShortWeekday = exports.formatWeekday = exports.formatMonth = exports.formatMonthYear = exports.formatLongDate = exports.formatDate = void 0;\n\nvar _getUserLocale = _interopRequireDefault(require(\"get-user-locale\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction getFormatter(options) {\n  return function (locale, date) {\n    return date.toLocaleString(locale || (0, _getUserLocale[\"default\"])(), options);\n  };\n}\n/**\r\n * Changes the hour in a Date to ensure right date formatting even if DST is messed up.\r\n * Workaround for bug in WebKit and Firefox with historical dates.\r\n * For more details, see:\r\n * https://bugs.chromium.org/p/chromium/issues/detail?id=750465\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1385643\r\n *\r\n * @param {Date} date Date.\r\n */\n\n\nfunction toSafeHour(date) {\n  var safeDate = new Date(date);\n  return new Date(safeDate.setHours(12));\n}\n\nfunction getSafeFormatter(options) {\n  return function (locale, date) {\n    return getFormatter(options)(locale, toSafeHour(date));\n  };\n}\n\nvar formatDateOptions = {\n  day: 'numeric',\n  month: 'numeric',\n  year: 'numeric'\n};\nvar formatLongDateOptions = {\n  day: 'numeric',\n  month: 'long',\n  year: 'numeric'\n};\nvar formatMonthYearOptions = {\n  month: 'long',\n  year: 'numeric'\n};\nvar formatMonthOptions = {\n  month: 'long'\n};\nvar formatWeekdayOptions = {\n  weekday: 'long'\n};\nvar formatShortWeekdayOptions = {\n  weekday: 'short'\n};\nvar formatDate = getSafeFormatter(formatDateOptions);\nexports.formatDate = formatDate;\nvar formatLongDate = getSafeFormatter(formatLongDateOptions);\nexports.formatLongDate = formatLongDate;\nvar formatMonthYear = getSafeFormatter(formatMonthYearOptions);\nexports.formatMonthYear = formatMonthYear;\nvar formatMonth = getSafeFormatter(formatMonthOptions);\nexports.formatMonth = formatMonth;\nvar formatWeekday = getSafeFormatter(formatWeekdayOptions);\nexports.formatWeekday = formatWeekday;\nvar formatShortWeekday = getSafeFormatter(formatShortWeekdayOptions);\nexports.formatShortWeekday = formatShortWeekday;","map":{"version":3,"sources":["C:/Users/salahudin/Desktop/FYP-Version-Controlled/fyp2/front-end/node_modules/react-calendar/dist/shared/dateFormatter.js"],"names":["Object","defineProperty","exports","value","formatShortWeekday","formatWeekday","formatMonth","formatMonthYear","formatLongDate","formatDate","_getUserLocale","_interopRequireDefault","require","obj","__esModule","getFormatter","options","locale","date","toLocaleString","toSafeHour","safeDate","Date","setHours","getSafeFormatter","formatDateOptions","day","month","year","formatLongDateOptions","formatMonthYearOptions","formatMonthOptions","formatWeekdayOptions","weekday","formatShortWeekdayOptions"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAACI,WAAR,GAAsBJ,OAAO,CAACK,eAAR,GAA0BL,OAAO,CAACM,cAAR,GAAyBN,OAAO,CAACO,UAAR,GAAqB,KAAK,CAAxJ;;AAEA,IAAIC,cAAc,GAAGC,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA3C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAO,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAC7B,WAAOA,IAAI,CAACC,cAAL,CAAoBF,MAAM,IAAI,CAAC,GAAGP,cAAc,CAAC,SAAD,CAAlB,GAA9B,EAAgEM,OAAhE,CAAP;AACD,GAFD;AAGD;AACD;;;;;;;;;;;AAWA,SAASI,UAAT,CAAoBF,IAApB,EAA0B;AACxB,MAAIG,QAAQ,GAAG,IAAIC,IAAJ,CAASJ,IAAT,CAAf;AACA,SAAO,IAAII,IAAJ,CAASD,QAAQ,CAACE,QAAT,CAAkB,EAAlB,CAAT,CAAP;AACD;;AAED,SAASC,gBAAT,CAA0BR,OAA1B,EAAmC;AACjC,SAAO,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAC7B,WAAOH,YAAY,CAACC,OAAD,CAAZ,CAAsBC,MAAtB,EAA8BG,UAAU,CAACF,IAAD,CAAxC,CAAP;AACD,GAFD;AAGD;;AAED,IAAIO,iBAAiB,GAAG;AACtBC,EAAAA,GAAG,EAAE,SADiB;AAEtBC,EAAAA,KAAK,EAAE,SAFe;AAGtBC,EAAAA,IAAI,EAAE;AAHgB,CAAxB;AAKA,IAAIC,qBAAqB,GAAG;AAC1BH,EAAAA,GAAG,EAAE,SADqB;AAE1BC,EAAAA,KAAK,EAAE,MAFmB;AAG1BC,EAAAA,IAAI,EAAE;AAHoB,CAA5B;AAKA,IAAIE,sBAAsB,GAAG;AAC3BH,EAAAA,KAAK,EAAE,MADoB;AAE3BC,EAAAA,IAAI,EAAE;AAFqB,CAA7B;AAIA,IAAIG,kBAAkB,GAAG;AACvBJ,EAAAA,KAAK,EAAE;AADgB,CAAzB;AAGA,IAAIK,oBAAoB,GAAG;AACzBC,EAAAA,OAAO,EAAE;AADgB,CAA3B;AAGA,IAAIC,yBAAyB,GAAG;AAC9BD,EAAAA,OAAO,EAAE;AADqB,CAAhC;AAGA,IAAIxB,UAAU,GAAGe,gBAAgB,CAACC,iBAAD,CAAjC;AACAvB,OAAO,CAACO,UAAR,GAAqBA,UAArB;AACA,IAAID,cAAc,GAAGgB,gBAAgB,CAACK,qBAAD,CAArC;AACA3B,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACA,IAAID,eAAe,GAAGiB,gBAAgB,CAACM,sBAAD,CAAtC;AACA5B,OAAO,CAACK,eAAR,GAA0BA,eAA1B;AACA,IAAID,WAAW,GAAGkB,gBAAgB,CAACO,kBAAD,CAAlC;AACA7B,OAAO,CAACI,WAAR,GAAsBA,WAAtB;AACA,IAAID,aAAa,GAAGmB,gBAAgB,CAACQ,oBAAD,CAApC;AACA9B,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACA,IAAID,kBAAkB,GAAGoB,gBAAgB,CAACU,yBAAD,CAAzC;AACAhC,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.formatShortWeekday = exports.formatWeekday = exports.formatMonth = exports.formatMonthYear = exports.formatLongDate = exports.formatDate = void 0;\r\n\r\nvar _getUserLocale = _interopRequireDefault(require(\"get-user-locale\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\r\n\r\nfunction getFormatter(options) {\r\n  return function (locale, date) {\r\n    return date.toLocaleString(locale || (0, _getUserLocale[\"default\"])(), options);\r\n  };\r\n}\r\n/**\r\n * Changes the hour in a Date to ensure right date formatting even if DST is messed up.\r\n * Workaround for bug in WebKit and Firefox with historical dates.\r\n * For more details, see:\r\n * https://bugs.chromium.org/p/chromium/issues/detail?id=750465\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1385643\r\n *\r\n * @param {Date} date Date.\r\n */\r\n\r\n\r\nfunction toSafeHour(date) {\r\n  var safeDate = new Date(date);\r\n  return new Date(safeDate.setHours(12));\r\n}\r\n\r\nfunction getSafeFormatter(options) {\r\n  return function (locale, date) {\r\n    return getFormatter(options)(locale, toSafeHour(date));\r\n  };\r\n}\r\n\r\nvar formatDateOptions = {\r\n  day: 'numeric',\r\n  month: 'numeric',\r\n  year: 'numeric'\r\n};\r\nvar formatLongDateOptions = {\r\n  day: 'numeric',\r\n  month: 'long',\r\n  year: 'numeric'\r\n};\r\nvar formatMonthYearOptions = {\r\n  month: 'long',\r\n  year: 'numeric'\r\n};\r\nvar formatMonthOptions = {\r\n  month: 'long'\r\n};\r\nvar formatWeekdayOptions = {\r\n  weekday: 'long'\r\n};\r\nvar formatShortWeekdayOptions = {\r\n  weekday: 'short'\r\n};\r\nvar formatDate = getSafeFormatter(formatDateOptions);\r\nexports.formatDate = formatDate;\r\nvar formatLongDate = getSafeFormatter(formatLongDateOptions);\r\nexports.formatLongDate = formatLongDate;\r\nvar formatMonthYear = getSafeFormatter(formatMonthYearOptions);\r\nexports.formatMonthYear = formatMonthYear;\r\nvar formatMonth = getSafeFormatter(formatMonthOptions);\r\nexports.formatMonth = formatMonth;\r\nvar formatWeekday = getSafeFormatter(formatWeekdayOptions);\r\nexports.formatWeekday = formatWeekday;\r\nvar formatShortWeekday = getSafeFormatter(formatShortWeekdayOptions);\r\nexports.formatShortWeekday = formatShortWeekday;"]},"metadata":{},"sourceType":"script"}