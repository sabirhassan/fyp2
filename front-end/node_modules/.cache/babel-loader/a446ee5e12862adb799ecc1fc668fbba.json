{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-add-prescription.js\";\nimport React, { Component } from 'react';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport Table from 'react-bootstrap/Table';\nimport axios from 'axios';\nimport { Datatable } from \"@o2xp/react-datatable\";\nimport AddIcon from '@material-ui/icons/Add';\nvar count = 0;\nvar timings = [\"true\", \"false\"];\nvar id = 0;\nexport default class AddPrescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.actionsRow = ({\n      type,\n      payload\n    }) => {\n      console.log(type);\n      console.log(payload);\n\n      if (type === \"delete\") {\n        console.log(\"befor\", this.state.data);\n        var list = this.state.data;\n\n        for (var i = 0; i < list.length; i++) {\n          if (list[i][\"id\"] === payload.id) {\n            list.splice(i, 1);\n          }\n\n          this.setState({\n            data: list\n          });\n        }\n\n        console.log(\"after\", this.state.data);\n      } else if (type === \"save\") {\n        console.log(\"befor\", this.state.data);\n        var list = this.state.data;\n\n        for (var i = 0; i < list.length; i++) {\n          if (list[i][\"id\"] == payload.id) {\n            list[i][\"medicine\"] = payload[\"medicine\"];\n            list[i][\"dosage\"] = payload[\"dosage\"];\n            list[i][\"days\"] = payload[\"days\"];\n            list[i][\"morning\"] = payload[\"morning\"];\n            list[i][\"afternoon\"] = payload[\"afternoon\"];\n            list[i][\"evening\"] = payload[\"evening\"];\n            list[i][\"instructions\"] = payload[\"instructions\"];\n          }\n\n          this.setState({\n            data: list\n          });\n        }\n\n        console.log(\"after\", this.state.data);\n      }\n    };\n\n    this.addRow = () => {\n      console.log(\"add row\");\n      var l = this.state.data;\n      var d = {\n        id: id++,\n        medicine: '',\n        dosage: '',\n        days: 5,\n        morning: timings[0],\n        afternoon: timings[0],\n        evening: timings[0],\n        instructions: \"\"\n      };\n      l.push(d);\n      this.setState({\n        data: l\n      });\n    };\n\n    this.updateoptions = () => {\n      if (this.state.gotData == false) {\n        console.log(count++);\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/getMedicines').then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          if (value != \"empty\") {\n            let list = [];\n\n            for (var i = 0; i < value.length; i++) {\n              let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"];\n              list.push(n);\n            }\n\n            console.log(list);\n            this.setState({\n              medicineList: list,\n              gotData: true,\n              options: {\n                title: \"prescription datatable\",\n                dimensions: {\n                  datatable: {\n                    width: \"100%\",\n                    height: \"480px\"\n                  },\n                  row: {\n                    height: \"48px\"\n                  }\n                },\n                keyColumn: \"id\",\n                font: \"Arial\",\n                data: {\n                  columns: [{\n                    id: \"id\",\n                    label: \"id\",\n                    colSize: \"150px\",\n                    editable: false\n                  }, {\n                    id: \"medicine\",\n                    label: \"medicine\",\n                    colSize: \"150px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: list\n                  }, {\n                    id: \"dosage\",\n                    label: \"dosage\",\n                    colSize: \"150px\",\n                    editable: true,\n                    inputType: \"input\",\n                    dataType: \"text\"\n                  }, {\n                    id: \"days\",\n                    label: \"days\",\n                    colSize: \"80px\",\n                    editable: true,\n                    dataType: \"number\",\n                    valueVerification: val => {\n                      let error = val > 100 ? true : false;\n                      let message = val > 100 ? \"Value is too big\" : \"\";\n                      return {\n                        error: error,\n                        message: message\n                      };\n                    }\n                  }, {\n                    id: \"morning\",\n                    label: \"morning\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"afternoon\",\n                    label: \"afternoon\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"evening\",\n                    label: \"evening\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"instructions\",\n                    label: \"instructions\",\n                    colSize: \"100px\",\n                    editable: true,\n                    dataType: \"text\",\n                    inputType: \"input\"\n                  }],\n                  rows: this.state.data\n                },\n                features: {\n                  canEdit: true,\n                  canDelete: true,\n                  canSearch: true,\n                  canOrderColumns: true,\n                  additionalIcons: [{\n                    title: \"Add medicine\",\n                    icon: React.createElement(AddIcon, {\n                      color: \"primary\",\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 292\n                      },\n                      __self: this\n                    }),\n                    onClick: () => {\n                      this.addRow();\n                    }\n                  }]\n                }\n              }\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      doctor: '',\n      doctorList: [],\n      checkdoctor: true,\n      showMedicine: false,\n      data: [],\n      options: {},\n      gotData: false,\n      medicineList: []\n    };\n    this.onChangedoctor = this.onChangedoctor.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChangedoctor(e) {\n    this.setState({\n      doctor: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const object = JSON.parse(localStorage.getItem(\"patient\"));\n    const obj = {\n      contact: object.contact,\n      name: object.name,\n      doctor: this.state.doctor,\n      prescriptions: this.state.data\n    };\n    var l = this.state.data;\n\n    for (var i = 0; i < l.length; i++) {\n      if (l[i][\"medicine\"].length === 0 || l[i][\"dosage\"].length === 0) {\n        alert(\"some important information is missing\");\n        return;\n      }\n    }\n\n    console.log(obj);\n    axios.post('http://localhost:4000/addPrescription', obj).then(res => {\n      console.log(res.data);\n\n      if (res.data === \"success\") {\n        alert(\"prescription added Successfuly\");\n        this.setState({\n          doctor: '',\n          doctorList: [],\n          checkdoctor: true,\n          showdoctor: false,\n          showMedicine: false,\n          data: [],\n          options: {},\n          gotData: false,\n          medicineList: [],\n          touched: {\n            contact: false\n          }\n        });\n      } else {\n        alert(res.data);\n      }\n    });\n  }\n\n  render() {\n    const createDoctorElement = () => {\n      if (this.state.checkdoctor) {\n        // to stop useless api calls\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/getdoctors').then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          if (value != \"empty\") this.setState({\n            doctorList: value,\n            doctor: value[0],\n            checkdoctor: false\n          });\n        });\n      }\n\n      if (this.state.doctorList.length > 0) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, \"Select Reference Doctor:\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }), React.createElement(\"select\", {\n          value: this.state.doctor,\n          onChange: this.onChangedoctor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341\n          },\n          __self: this\n        }, this.state.doctorList.map(n => React.createElement(\"option\", {\n          value: n,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }, n))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createTableElement = () => {\n      this.updateoptions();\n      return React.createElement(\"div\", {\n        style: {\n          marginTop: 10,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \"Medicine List\"), React.createElement(Datatable, {\n        options: this.state.options,\n        actions: this.actionsRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }));\n    };\n\n    const doctorElement = createDoctorElement();\n    const Table = createTableElement();\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, doctorElement), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, Table), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      style: {\n        marginTop: 10\n      },\n      value: \"Add prescription\",\n      onClick: this.onSubmit,\n      className: \"btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-add-prescription.js"],"names":["React","Component","Multiselect","Table","axios","Datatable","AddIcon","count","timings","id","AddPrescription","constructor","props","actionsRow","type","payload","console","log","state","data","list","i","length","splice","setState","addRow","l","d","medicine","dosage","days","morning","afternoon","evening","instructions","push","updateoptions","gotData","promise1","Promise","resolve","reject","post","then","res","value","n","medicineList","options","title","dimensions","datatable","width","height","row","keyColumn","font","columns","label","colSize","editable","inputType","values","dataType","valueVerification","val","error","message","rows","features","canEdit","canDelete","canSearch","canOrderColumns","additionalIcons","icon","onClick","doctor","doctorList","checkdoctor","showMedicine","onChangedoctor","bind","onSubmit","e","target","preventDefault","object","JSON","parse","localStorage","getItem","obj","contact","name","prescriptions","alert","showdoctor","touched","render","createDoctorElement","map","createTableElement","marginTop","zIndex","doctorElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Table from 'react-bootstrap/Table'\r\nimport axios from 'axios';\r\nimport {Datatable} from \"@o2xp/react-datatable\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n\r\n\r\nvar count = 0\r\nvar timings=[\"true\",\"false\"]\r\nvar id = 0\r\n\r\n\r\nexport default class AddPrescription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            doctor:'',\r\n            doctorList:[],\r\n            checkdoctor:true,\r\n            showMedicine:false,\r\n            data:[],\r\n            options:{},\r\n            gotData:false,\r\n            medicineList:[],\r\n            \r\n        }\r\n        this.onChangedoctor = this.onChangedoctor.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n     \r\n    }\r\n\r\n    onChangedoctor(e) {\r\n        this.setState({\r\n            doctor: e.target.value\r\n        });\r\n    }\r\n\r\n \r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        const object = JSON.parse( localStorage.getItem(\"patient\"))\r\n\r\n        const obj= {\r\n            contact: object.contact,\r\n            name: object.name,\r\n            doctor:this.state.doctor,\r\n            prescriptions : this.state.data\r\n        }\r\n\r\n        var l = this.state.data\r\n        for(var i=0;i<l.length;i++)\r\n        {\r\n            if(l[i][\"medicine\"].length===0 || l[i][\"dosage\"].length===0)\r\n            {\r\n                alert(\"some important information is missing\")\r\n                return\r\n            }\r\n        }\r\n\r\n        console.log(obj)\r\n        \r\n        axios.post('http://localhost:4000/addPrescription', obj)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                if(res.data===\"success\")\r\n                {\r\n                    alert(\"prescription added Successfuly\");\r\n                    this.setState({\r\n                        doctor:'',\r\n                        doctorList:[],\r\n                        checkdoctor:true,\r\n                        showdoctor:false,\r\n                        showMedicine:false,\r\n                        data:[],\r\n                        options:{},\r\n                        gotData:false,\r\n                        medicineList:[],\r\n                        touched: {\r\n                            contact: false,\r\n                          }\r\n            \r\n            \r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    alert(res.data);\r\n                }\r\n            });\r\n\r\n\r\n    }\r\n\r\n     \r\n     \r\n\r\n\r\n    actionsRow = ({ type, payload }) => {\r\n        console.log(type);\r\n        console.log(payload);\r\n        if(type===\"delete\")\r\n        {       \r\n            console.log(\"befor\",this.state.data)\r\n            var list = this.state.data\r\n            for( var i = 0; i < list.length; i++){ \r\n                \r\n                if ( list[i][\"id\"] === payload.id) { \r\n                    list.splice(i, 1); \r\n                }\r\n                this.setState({\r\n                data:list\r\n                })\r\n        \r\n            }\r\n            console.log(\"after\",this.state.data)\r\n        }\r\n        else if(type===\"save\")\r\n        {\r\n            console.log(\"befor\",this.state.data)\r\n            var list = this.state.data\r\n            for( var i = 0; i < list.length; i++){ \r\n                \r\n                if ( list[i][\"id\"] == payload.id) { \r\n                    list[i][\"medicine\"] = payload[\"medicine\"]\r\n                    list[i][\"dosage\"] = payload[\"dosage\"]\r\n                    list[i][\"days\"] = payload[\"days\"]\r\n                    list[i][\"morning\"] = payload[\"morning\"]\r\n                    list[i][\"afternoon\"] = payload[\"afternoon\"]\r\n                    list[i][\"evening\"] = payload[\"evening\"]\r\n                    list[i][\"instructions\"] = payload[\"instructions\"]\r\n                }\r\n                this.setState({\r\n                data:list\r\n                })\r\n        \r\n            }\r\n            console.log(\"after\",this.state.data)\r\n        \r\n        }\r\n    };\r\n\r\n    addRow = ()=>{\r\n        console.log(\"add row\")\r\n        var l = this.state.data\r\n        var d = {\r\n            id:id++,\r\n            medicine: '',\r\n            dosage:'',\r\n            days: 5,\r\n            morning: timings[0],\r\n            afternoon: timings[0],\r\n            evening: timings[0],\r\n            instructions: \"\",\r\n          }\r\n        l.push(d)\r\n        this.setState({\r\n            data:l\r\n        })\r\n    }\r\n\r\n\r\n    updateoptions = ()=>\r\n    {\r\n\r\n      if(this.state.gotData==false)\r\n      {\r\n        console.log(count++)\r\n\r\n        const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n        axios.post('http://localhost:4000/getMedicines',)\r\n        .then(res => {\r\n            resolve(res.data)\r\n          });\r\n        });\r\n      \r\n        promise1.then((value) =>{\r\n            if(value!=\"empty\")\r\n            {\r\n\r\n                let list = []\r\n                for(var i=0;i<value.length;i++)\r\n                {\r\n                    let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"]\r\n                    list.push(n)\r\n                }\r\n                console.log(list)\r\n\r\n                this.setState({\r\n                    medicineList: list,\r\n                    gotData:true,\r\n                    options : {\r\n                        title: \"prescription datatable\",\r\n                        dimensions: {\r\n                          datatable: {\r\n                            width: \"100%\",\r\n                            height: \"480px\"\r\n                          },\r\n                          row: {\r\n                            height: \"48px\"\r\n                          }\r\n                        },\r\n                        keyColumn: \"id\",\r\n                        font: \"Arial\",\r\n                        data: {\r\n                          columns: [\r\n                            {\r\n                                id: \"id\",\r\n                                label: \"id\",\r\n                                colSize: \"150px\",\r\n                                editable: false\r\n                            },\r\n                            {\r\n                              id: \"medicine\",\r\n                              label: \"medicine\",\r\n                              colSize: \"150px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: list\r\n                            },\r\n                            {\r\n                                id: \"dosage\",\r\n                                label: \"dosage\",\r\n                                colSize: \"150px\",\r\n                                editable: true,\r\n                                inputType: \"input\",\r\n                                dataType: \"text\"\r\n                            },\r\n                            {\r\n                              id: \"days\",\r\n                              label: \"days\",\r\n                              colSize: \"80px\",\r\n                              editable: true,\r\n                              dataType: \"number\",\r\n                              valueVerification: val => {\r\n                                let error = val > 100 ? true : false;\r\n                                let message = val > 100 ? \"Value is too big\" : \"\";\r\n                                return {\r\n                                  error: error,\r\n                                  message: message\r\n                                };\r\n                              }\r\n                            },\r\n                            {\r\n                              id: \"morning\",\r\n                              label: \"morning\",\r\n                              colSize: \"50px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: timings\r\n                            },\r\n                            {\r\n                                id: \"afternoon\",\r\n                                label: \"afternoon\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"evening\",\r\n                                label: \"evening\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"instructions\",\r\n                                label: \"instructions\",\r\n                                colSize: \"100px\",\r\n                                editable: true,\r\n                                dataType: \"text\",\r\n                                inputType: \"input\"\r\n                            }\r\n                          ],\r\n                          rows: this.state.data\r\n                        },\r\n                        features: {\r\n                          canEdit: true,\r\n                          canDelete: true,\r\n                          canSearch: true,\r\n                          canOrderColumns: true,\r\n                          additionalIcons: [\r\n                            {\r\n                              title: \"Add medicine\",\r\n                              icon: <AddIcon color=\"primary\" />,\r\n                              onClick: () => {this.addRow()}\r\n                            }\r\n                          ],\r\n                        }\r\n                      }\r\n            \r\n                });\r\n            }\r\n        });\r\n\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n         \r\n        const createDoctorElement = () => {\r\n            if(this.state.checkdoctor)\r\n            {// to stop useless api calls\r\n                const promise1 = new Promise(function(resolve, reject) {\r\n                    \r\n                    axios.post('http://localhost:4000/getdoctors')\r\n                    .then(res => {\r\n                        resolve(res.data)\r\n                    });\r\n                });\r\n                \r\n                promise1.then((value) =>{\r\n                    if(value!=\"empty\")\r\n                    this.setState({\r\n                        doctorList: value,\r\n                        doctor:value[0],\r\n                        checkdoctor:false\r\n                    });\r\n                });\r\n                \r\n            }\r\n\r\n            if(this.state.doctorList.length>0)\r\n            {\r\n                return (\r\n                        <div>\r\n                        <label >Select Reference Doctor:</label>\r\n                            <br></br>\r\n                            <select value={this.state.doctor} onChange={this.onChangedoctor}>\r\n                            {this.state.doctorList.map((n) => <option value={n}>{n}</option>)}\r\n                            </select>\r\n                            \r\n                        </div>\r\n                        );            \r\n            }\r\n            else\r\n            {\r\n                return(\r\n                <div>\r\n                </div>\r\n                );\r\n            }  \r\n\r\n        }\r\n         \r\n\r\n        const createTableElement = () => {\r\n\r\n            this.updateoptions()\r\n            return(\r\n            <div style={{marginTop: 10,zIndex:1}}>\r\n            <h3>Medicine List</h3>\r\n            <Datatable\r\n            options={this.state.options}\r\n            actions={this.actionsRow}\r\n            />\r\n\r\n            </div>\r\n            )\r\n    }\r\n\r\n        const doctorElement = createDoctorElement();\r\n        const Table = createTableElement();\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                \r\n\r\n                \r\n                <div>\r\n                {doctorElement}\r\n                </div>\r\n\r\n\r\n                <div>\r\n                {Table}\r\n                </div>\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\"  style={{marginTop:10}} value=\"Add prescription\" onClick={this.onSubmit} className=\"btn-primary\" />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}