{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-add-prescription.js\";\nimport React, { Component } from 'react';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport Table from 'react-bootstrap/Table';\nimport axios from 'axios';\nimport { Datatable } from \"@o2xp/react-datatable\";\nimport AddIcon from '@material-ui/icons/Add';\n\nfunction Validatephone(contact) {\n  //    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var phoneno = /^\\+?([0-9]{12})\\)?$/;\n\n  if (contact.match(phoneno)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction validate(contact) {\n  // true means invalid, so our conditions got reversed\n  return {\n    contact: Validatephone(contact)\n  };\n}\n\nvar count = 0;\nvar timings = [\"true\", \"false\"];\nvar dummyRow = {\n  name: '',\n  days: 5,\n  morning: timings[0],\n  noon: timings[0],\n  evening: timings[0],\n  instruction: \"\"\n}; // Advanced Example\n\nconst options = {\n  title: \"My super datatable\",\n  dimensions: {\n    datatable: {\n      width: \"90%\",\n      height: \"40%\"\n    },\n    row: {\n      height: \"48px\"\n    }\n  },\n  keyColumn: \"id\",\n  font: \"Arial\",\n  data: {\n    columns: [{\n      id: \"id\",\n      label: \"id\",\n      colSize: \"150px\",\n      editable: false\n    }, {\n      id: \"name\",\n      label: \"name\",\n      colSize: \"100px\",\n      editable: true,\n      inputType: \"select\",\n      values: [\"green\", \"blue\", \"brown\"]\n    }, {\n      id: \"days\",\n      label: \"days\",\n      colSize: \"80px\",\n      editable: true,\n      dataType: \"number\",\n      valueVerification: val => {\n        let error = val > 100 ? true : false;\n        let message = val > 100 ? \"Value is too big\" : \"\";\n        return {\n          error: error,\n          message: message\n        };\n      }\n    }, {\n      id: \"morning\",\n      label: \"morning\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"noon\",\n      label: \"noon\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"evening\",\n      label: \"evening\",\n      colSize: \"50px\",\n      editable: true,\n      dataType: \"boolean\",\n      inputType: \"checkbox\"\n    }, {\n      id: \"instruction\",\n      label: \"instruction\",\n      colSize: \"100px\",\n      editable: true,\n      dataType: \"text\",\n      inputType: \"input\"\n    }],\n    rows: []\n  },\n  features: {\n    canEdit: true,\n    canDelete: true,\n    canSearch: true,\n    canOrderColumns: true,\n    additionalIcons: [{\n      title: \"Add medicine\",\n      icon: React.createElement(AddIcon, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }),\n      onClick: () => alert(\"Add Medicine!\")\n    }]\n  }\n};\nexport default class AddPrescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBlur = field => evt => {\n      this.setState({\n        touched: { ...this.state.touched,\n          [field]: true\n        }\n      });\n    };\n\n    this.actionsRow = ({\n      type,\n      payload\n    }) => {\n      console.log(type);\n      console.log(payload);\n    };\n\n    this.addRow = () => {\n      console.log(\"add row\");\n      var l = this.state.data;\n      var d = {\n        name: '',\n        days: 5,\n        morning: timings[0],\n        noon: timings[0],\n        evening: timings[0],\n        instruction: \"\"\n      };\n      l.push(d);\n      this.setState({\n        data: l\n      });\n    };\n\n    this.updateoptions = () => {\n      if (this.state.gotData == false) {\n        console.log(count++);\n        const promise1 = new Promise(function (resolve, reject) {\n          axios.post('http://localhost:4000/getMedicines').then(res => {\n            resolve(res.data);\n          });\n        });\n        promise1.then(value => {\n          if (value != \"empty\") {\n            let list = [];\n\n            for (var i = 0; i < value.length; i++) {\n              let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"];\n              list.push(n);\n            }\n\n            console.log(list);\n            this.setState({\n              medicineList: list,\n              gotData: true,\n              options: {\n                title: \"prescription datatable\",\n                dimensions: {\n                  datatable: {\n                    width: \"90%\",\n                    height: \"100%\"\n                  },\n                  row: {\n                    height: \"48px\"\n                  }\n                },\n                keyColumn: \"id\",\n                font: \"Arial\",\n                data: {\n                  columns: [{\n                    id: \"name\",\n                    label: \"name\",\n                    colSize: \"150px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: list\n                  }, {\n                    id: \"days\",\n                    label: \"days\",\n                    colSize: \"80px\",\n                    editable: true,\n                    dataType: \"number\",\n                    valueVerification: val => {\n                      let error = val > 100 ? true : false;\n                      let message = val > 100 ? \"Value is too big\" : \"\";\n                      return {\n                        error: error,\n                        message: message\n                      };\n                    }\n                  }, {\n                    id: \"morning\",\n                    label: \"morning\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"noon\",\n                    label: \"noon\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"evening\",\n                    label: \"evening\",\n                    colSize: \"50px\",\n                    editable: true,\n                    inputType: \"select\",\n                    values: timings\n                  }, {\n                    id: \"instruction\",\n                    label: \"instruction\",\n                    colSize: \"100px\",\n                    editable: true,\n                    dataType: \"text\",\n                    inputType: \"input\"\n                  }],\n                  rows: this.state.data\n                },\n                features: {\n                  canEdit: true,\n                  canDelete: true,\n                  canSearch: true,\n                  canOrderColumns: true,\n                  additionalIcons: [{\n                    title: \"Add medicine\",\n                    icon: React.createElement(AddIcon, {\n                      color: \"primary\",\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 448\n                      },\n                      __self: this\n                    }),\n                    onClick: () => {\n                      this.addRow();\n                    }\n                  }]\n                }\n              }\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      contact: '',\n      name: '',\n      doctor: '',\n      doctorList: [],\n      checkdoctor: true,\n      showdoctor: false,\n      showMedicine: false,\n      medicine: '',\n      dosage: '',\n      days: '',\n      instructions: '',\n      data: [dummyRow],\n      options: {},\n      gotData: false,\n      medicineList: [],\n      touched: {\n        contact: false\n      }\n    };\n    this.onChangecontact = this.onChangecontact.bind(this);\n    this.onChangedoctor = this.onChangedoctor.bind(this);\n    this.onChangemedicine = this.onChangemedicine.bind(this);\n    this.onChangedosage = this.onChangedosage.bind(this);\n    this.onChangedays = this.onChangedays.bind(this);\n    this.onChangeinstructions = this.onChangeinstructions.bind(this);\n    this.handleSubmitAdd = this.handleSubmitAdd.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChangecontact(e) {\n    this.setState({\n      contact: e.target.value,\n      nameList: [],\n      checkName: true\n    });\n  }\n\n  onChangedoctor(e) {\n    this.setState({\n      doctor: e.target.value\n    });\n  }\n\n  onChangemedicine(e) {\n    this.setState({\n      medicine: e.target.value\n    });\n  }\n\n  onChangedosage(e) {\n    this.setState({\n      dosage: e.target.value\n    });\n  }\n\n  onChangedays(e) {\n    this.setState({\n      days: e.target.value\n    });\n  }\n\n  onChangeinstructions(e) {\n    this.setState({\n      instructions: e.target.value\n    });\n  }\n\n  handleSubmitAdd(e) {\n    e.preventDefault();\n    console.log(this.state.medicine, this.state.dosage, this.state.days, this.state.timings, this.state.instructions);\n    var morning = false;\n    var afternoon = false;\n    var evening = false;\n\n    for (var i = 0; i < this.state.timings.length; i++) {\n      if (this.state.timings[i] == \"morning\") {\n        morning = true;\n      } else if (this.state.timings[i] == \"noon\") {\n        afternoon = true;\n      } else if (this.state.timings[i] == \"evening\") {\n        evening = true;\n      }\n    }\n\n    const item = {\n      medicine: this.state.medicine,\n      dosage: this.state.dosage,\n      days: this.state.days,\n      morning: morning,\n      afternoon: afternoon,\n      evening: evening,\n      timings: this.state.timings,\n      instructions: this.state.instructions\n    };\n    this.state.prescriptions.push(item);\n    console.log(this.state.prescriptions);\n    this.setState({\n      medicine: '',\n      dosage: '',\n      days: '',\n      instructions: ''\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const obj = {\n      contact: this.state.contact,\n      name: this.state.name,\n      doctor: this.state.doctor,\n      prescriptions: this.state.prescriptions\n    };\n    console.log(obj);\n    axios.post('http://localhost:4000/addPrescription', obj).then(res => {\n      console.log(res.data);\n\n      if (res.data === \"success\") {\n        alert(\"prescription added Successfuly\");\n        this.setState({\n          contact: '',\n          name: '',\n          nameList: [],\n          checkName: true,\n          doctor: '',\n          doctorList: [],\n          checkdoctor: true,\n          showdoctor: false,\n          showMedicine: false,\n          medicine: '',\n          dosage: '',\n          timings: [],\n          instructions: '',\n          prescriptions: [],\n          touched: {\n            contact: false\n          }\n        });\n      } else {\n        alert(res.data);\n      }\n    });\n  }\n\n  render() {\n    const errors = validate(this.state.contact);\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\n\n    const shouldMarkError = field => {\n      const hasError = errors[field];\n      const shouldShow = this.state.touched[field];\n      return hasError ? shouldShow : false;\n    };\n\n    const createNameElement = () => {\n      if (!Validatephone(this.state.contact)) {\n        const user = {\n          contact: this.state.contact\n        };\n\n        if (this.state.checkName) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getpatients', user).then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              nameList: value,\n              name: value[0],\n              checkName: false,\n              showdoctor: true,\n              showMedicine: true\n            });\n          });\n        }\n\n        if (this.state.nameList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 514\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 515\n            },\n            __self: this\n          }, \"Select Patient:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 516\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.name,\n            onChange: this.onChangename,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 517\n            },\n            __self: this\n          }, this.state.nameList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 518\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            className: \"invalid-feedback\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 527\n            },\n            __self: this\n          }, \"No patient exists with this contact.\");\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 537\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createDoctorElement = () => {\n      if (this.state.showdoctor) {\n        if (this.state.checkdoctor) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getdoctors').then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              doctorList: value,\n              doctor: value[0],\n              checkdoctor: false\n            });\n          });\n        }\n\n        if (this.state.doctorList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 573\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 574\n            },\n            __self: this\n          }, \"Select Reference Doctor:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 575\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.doctor,\n            onChange: this.onChangedoctor,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 576\n            },\n            __self: this\n          }, this.state.doctorList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 577\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 586\n            },\n            __self: this\n          });\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 595\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createTableElement = () => {\n      this.updateoptions();\n      return React.createElement(\"div\", {\n        style: {\n          marginTop: 10,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }, \"Medicine List\"), React.createElement(Datatable, {\n        options: this.state.options,\n        actions: this.actionsRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }));\n    };\n\n    const nameElement = createNameElement(this.state.contact);\n    const doctorElement = createDoctorElement();\n    const Table = createTableElement();\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"Contact: \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\",\n      value: this.state.contact,\n      onChange: this.onChangecontact,\n      onBlur: this.handleBlur(\"contact\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), shouldMarkError(\"contact\") ? React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, \"Please provide a valid contact like +921112223456.\") : \"\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }, nameElement), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, doctorElement), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, Table), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      disabled: isDisabled,\n      style: {\n        marginTop: 10\n      },\n      value: \"Add prescription\",\n      onClick: this.onSubmit,\n      className: \"btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-add-prescription.js"],"names":["React","Component","Multiselect","Table","axios","Datatable","AddIcon","Validatephone","contact","phoneno","match","validate","count","timings","dummyRow","name","days","morning","noon","evening","instruction","options","title","dimensions","datatable","width","height","row","keyColumn","font","data","columns","id","label","colSize","editable","inputType","values","dataType","valueVerification","val","error","message","rows","features","canEdit","canDelete","canSearch","canOrderColumns","additionalIcons","icon","onClick","alert","AddPrescription","constructor","props","handleBlur","field","evt","setState","touched","state","actionsRow","type","payload","console","log","addRow","l","d","push","updateoptions","gotData","promise1","Promise","resolve","reject","post","then","res","value","list","i","length","n","medicineList","doctor","doctorList","checkdoctor","showdoctor","showMedicine","medicine","dosage","instructions","onChangecontact","bind","onChangedoctor","onChangemedicine","onChangedosage","onChangedays","onChangeinstructions","handleSubmitAdd","onSubmit","e","target","nameList","checkName","preventDefault","afternoon","item","prescriptions","obj","render","errors","isDisabled","Object","keys","some","x","shouldMarkError","hasError","shouldShow","createNameElement","user","onChangename","map","createDoctorElement","createTableElement","marginTop","zIndex","nameElement","doctorElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport Table from 'react-bootstrap/Table'\r\nimport axios from 'axios';\r\nimport {Datatable} from \"@o2xp/react-datatable\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nfunction Validatephone(contact) \r\n{\r\n//    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    var phoneno = /^\\+?([0-9]{12})\\)?$/;\r\n    if(contact.match(phoneno))\r\n    {\r\n    return false;\r\n    }\r\n    else\r\n    {\r\n    return true;\r\n    }\r\n}\r\n\r\nfunction validate(contact) {\r\n    // true means invalid, so our conditions got reversed\r\n    return {\r\n       contact: Validatephone(contact),\r\n    };\r\n}\r\n\r\nvar count = 0\r\nvar timings=[\"true\",\"false\"]\r\nvar dummyRow = {\r\n    name: '',\r\n    days: 5,\r\n    morning: timings[0],\r\n    noon: timings[0],\r\n    evening: timings[0],\r\n    instruction: \"\",\r\n  }\r\n\r\n\r\n// Advanced Example\r\nconst options = {\r\n    title: \"My super datatable\",\r\n    dimensions: {\r\n      datatable: {\r\n        width: \"90%\",\r\n        height: \"40%\"\r\n      },\r\n      row: {\r\n        height: \"48px\"\r\n      }\r\n    },\r\n    keyColumn: \"id\",\r\n    font: \"Arial\",\r\n    data: {\r\n      columns: [\r\n        {\r\n          id: \"id\",\r\n          label: \"id\",\r\n          colSize: \"150px\",\r\n          editable: false\r\n        },\r\n        {\r\n          id: \"name\",\r\n          label: \"name\",\r\n          colSize: \"100px\",\r\n          editable: true,\r\n          inputType: \"select\",\r\n          values: [\"green\", \"blue\", \"brown\"]\r\n        },\r\n        {\r\n          id: \"days\",\r\n          label: \"days\",\r\n          colSize: \"80px\",\r\n          editable: true,\r\n          dataType: \"number\",\r\n          valueVerification: val => {\r\n            let error = val > 100 ? true : false;\r\n            let message = val > 100 ? \"Value is too big\" : \"\";\r\n            return {\r\n              error: error,\r\n              message: message\r\n            };\r\n          }\r\n        },\r\n        {\r\n          id: \"morning\",\r\n          label: \"morning\",\r\n          colSize: \"50px\",\r\n          editable: true,\r\n          dataType: \"boolean\",\r\n          inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"noon\",\r\n            label: \"noon\",\r\n            colSize: \"50px\",\r\n            editable: true,\r\n            dataType: \"boolean\",\r\n            inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"evening\",\r\n            label: \"evening\",\r\n            colSize: \"50px\",\r\n            editable: true,\r\n            dataType: \"boolean\",\r\n            inputType: \"checkbox\"\r\n        },\r\n        {\r\n            id: \"instruction\",\r\n            label: \"instruction\",\r\n            colSize: \"100px\",\r\n            editable: true,\r\n            dataType: \"text\",\r\n            inputType: \"input\"\r\n        }\r\n      ],\r\n      rows: []\r\n    },\r\n    features: {\r\n      canEdit: true,\r\n      canDelete: true,\r\n      canSearch: true,\r\n      canOrderColumns: true,\r\n      additionalIcons: [\r\n        {\r\n          title: \"Add medicine\",\r\n          icon: <AddIcon color=\"primary\" />,\r\n          onClick: () => alert(\"Add Medicine!\")\r\n        }\r\n      ],\r\n    }\r\n  };\r\n\r\n\r\nexport default class AddPrescription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            contact: '',\r\n            name:'',\r\n            doctor:'',\r\n            doctorList:[],\r\n            checkdoctor:true,\r\n            showdoctor:false,\r\n            showMedicine:false,\r\n            medicine:'',\r\n            dosage:'',\r\n            days:'',\r\n            instructions:'',\r\n            data:[dummyRow],\r\n            options:{},\r\n            gotData:false,\r\n            medicineList:[],\r\n            touched: {\r\n                contact: false,\r\n              }\r\n            \r\n        }\r\n        this.onChangecontact = this.onChangecontact.bind(this);\r\n        this.onChangedoctor = this.onChangedoctor.bind(this);\r\n        this.onChangemedicine = this.onChangemedicine.bind(this);\r\n        this.onChangedosage = this.onChangedosage.bind(this);\r\n        this.onChangedays = this.onChangedays.bind(this);\r\n        this.onChangeinstructions = this.onChangeinstructions.bind(this);\r\n        this.handleSubmitAdd = this.handleSubmitAdd.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n     \r\n    }\r\n    onChangecontact(e) {\r\n        this.setState({\r\n            contact: e.target.value,\r\n            nameList:[],\r\n            checkName:true\r\n        });\r\n    }\r\n\r\n    onChangedoctor(e) {\r\n        this.setState({\r\n            doctor: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangemedicine(e) {\r\n        this.setState({\r\n            medicine: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedosage(e) {\r\n        this.setState({\r\n            dosage: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedays(e) {\r\n        this.setState({\r\n            days: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeinstructions(e) {\r\n        this.setState({\r\n            instructions: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    handleSubmitAdd(e){\r\n        e.preventDefault();\r\n        console.log(this.state.medicine,this.state.dosage,this.state.days,this.state.timings,this.state.instructions);\r\n        \r\n        var morning = false;\r\n        var afternoon = false;\r\n        var evening = false;\r\n\r\n        for(var i=0;i<this.state.timings.length;i++)\r\n        {   \r\n            if(this.state.timings[i] == \"morning\")\r\n            {\r\n                morning = true;\r\n            }\r\n            else if(this.state.timings[i] == \"noon\")\r\n            {\r\n                afternoon = true;\r\n            }\r\n            else if(this.state.timings[i] == \"evening\")\r\n            {\r\n                evening = true;\r\n            }\r\n        }\r\n\r\n        const item = {\r\n            medicine:this.state.medicine,\r\n            dosage:this.state.dosage,\r\n            days:this.state.days,\r\n            morning:morning,\r\n            afternoon:afternoon,\r\n            evening:evening,\r\n            timings:this.state.timings,\r\n            instructions:this.state.instructions\r\n        }\r\n        this.state.prescriptions.push(item);\r\n        console.log(this.state.prescriptions);\r\n\r\n        this.setState({\r\n            medicine:'',\r\n            dosage:'',\r\n            days:'',\r\n            instructions: '',\r\n            \r\n        });\r\n\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        const obj= {\r\n            contact: this.state.contact,\r\n            name:this.state.name,\r\n            doctor:this.state.doctor,\r\n            prescriptions : this.state.prescriptions\r\n        }\r\n\r\n        console.log(obj)\r\n        \r\n        axios.post('http://localhost:4000/addPrescription', obj)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                if(res.data===\"success\")\r\n                {\r\n                    alert(\"prescription added Successfuly\");\r\n                    this.setState({\r\n                        contact: '',\r\n                        name:'',\r\n                        nameList:[],\r\n                        checkName:true,\r\n                        doctor:'',\r\n                        doctorList:[],\r\n                        checkdoctor:true,\r\n                        showdoctor:false,\r\n                        showMedicine:false,\r\n                        medicine:'',\r\n                        dosage:'',\r\n                        timings:[],\r\n                        instructions:'',\r\n                        prescriptions : [],\r\n                        touched: {\r\n                            contact: false,\r\n                        }\r\n            \r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    alert(res.data);\r\n                }\r\n            });\r\n\r\n\r\n    }\r\n\r\n     \r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n      } \r\n\r\n\r\n    actionsRow = ({ type, payload }) => {\r\n        console.log(type);\r\n        console.log(payload);\r\n    };\r\n\r\n    addRow = ()=>{\r\n        console.log(\"add row\")\r\n        var l = this.state.data\r\n        var d = {\r\n            name: '',\r\n            days: 5,\r\n            morning: timings[0],\r\n            noon: timings[0],\r\n            evening: timings[0],\r\n            instruction: \"\",\r\n          }\r\n        l.push(d)\r\n        this.setState({\r\n            data:l\r\n        })\r\n    }\r\n\r\n\r\n    updateoptions = ()=>\r\n    {\r\n\r\n      if(this.state.gotData==false)\r\n      {\r\n        console.log(count++)\r\n\r\n        const promise1 = new Promise(function(resolve, reject) {\r\n                      \r\n        axios.post('http://localhost:4000/getMedicines',)\r\n        .then(res => {\r\n            resolve(res.data)\r\n          });\r\n        });\r\n      \r\n        promise1.then((value) =>{\r\n            if(value!=\"empty\")\r\n            {\r\n\r\n                let list = []\r\n                for(var i=0;i<value.length;i++)\r\n                {\r\n                    let n = value[i][\"Drug Name\"] + \" \" + value[i][\"Strength\"] + \" \" + value[i][\"Form\"]\r\n                    list.push(n)\r\n                }\r\n                console.log(list)\r\n\r\n                this.setState({\r\n                    medicineList: list,\r\n                    gotData:true,\r\n                    options : {\r\n                        title: \"prescription datatable\",\r\n                        dimensions: {\r\n                          datatable: {\r\n                            width: \"90%\",\r\n                            height: \"100%\"\r\n                          },\r\n                          row: {\r\n                            height: \"48px\"\r\n                          }\r\n                        },\r\n                        keyColumn: \"id\",\r\n                        font: \"Arial\",\r\n                        data: {\r\n                          columns: [\r\n                            {\r\n                              id: \"name\",\r\n                              label: \"name\",\r\n                              colSize: \"150px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: list\r\n                            },\r\n                            {\r\n                              id: \"days\",\r\n                              label: \"days\",\r\n                              colSize: \"80px\",\r\n                              editable: true,\r\n                              dataType: \"number\",\r\n                              valueVerification: val => {\r\n                                let error = val > 100 ? true : false;\r\n                                let message = val > 100 ? \"Value is too big\" : \"\";\r\n                                return {\r\n                                  error: error,\r\n                                  message: message\r\n                                };\r\n                              }\r\n                            },\r\n                            {\r\n                              id: \"morning\",\r\n                              label: \"morning\",\r\n                              colSize: \"50px\",\r\n                              editable: true,\r\n                              inputType: \"select\",\r\n                              values: timings\r\n                            },\r\n                            {\r\n                                id: \"noon\",\r\n                                label: \"noon\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"evening\",\r\n                                label: \"evening\",\r\n                                colSize: \"50px\",\r\n                                editable: true,\r\n                                inputType: \"select\",\r\n                                values: timings\r\n                            },\r\n                            {\r\n                                id: \"instruction\",\r\n                                label: \"instruction\",\r\n                                colSize: \"100px\",\r\n                                editable: true,\r\n                                dataType: \"text\",\r\n                                inputType: \"input\"\r\n                            }\r\n                          ],\r\n                          rows: this.state.data\r\n                        },\r\n                        features: {\r\n                          canEdit: true,\r\n                          canDelete: true,\r\n                          canSearch: true,\r\n                          canOrderColumns: true,\r\n                          additionalIcons: [\r\n                            {\r\n                              title: \"Add medicine\",\r\n                              icon: <AddIcon color=\"primary\" />,\r\n                              onClick: () => {this.addRow()}\r\n                            }\r\n                          ],\r\n                        }\r\n                      }\r\n            \r\n                });\r\n            }\r\n        });\r\n\r\n      }\r\n\r\n      \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        const errors = validate(this.state.contact);\r\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n\r\n        \r\n        const shouldMarkError = field => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];      \r\n            return hasError ? shouldShow : false;\r\n          };\r\n    \r\n        const createNameElement = () => {\r\n\r\n            if(!Validatephone(this.state.contact))\r\n            {\r\n            \r\n\r\n            const user= {\r\n                contact:this.state.contact,\r\n            }\r\n\r\n            if(this.state.checkName)\r\n            {// to stop useless api calls\r\n                const promise1 = new Promise(function(resolve, reject) {\r\n                    \r\n                    axios.post('http://localhost:4000/getpatients', user)\r\n                    .then(res => {\r\n                        resolve(res.data)\r\n                    });\r\n                });\r\n                \r\n                promise1.then((value) =>{\r\n                    if(value!=\"empty\")\r\n                    this.setState({\r\n                        nameList: value,\r\n                        name:value[0],\r\n                        checkName:false,\r\n                        showdoctor:true,\r\n                        showMedicine:true\r\n                    });\r\n                });\r\n                \r\n            }\r\n\r\n                if(this.state.nameList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Patient:</label>\r\n                                <br></br>\r\n                                <select value={this.state.name} onChange={this.onChangename}>\r\n                                {this.state.nameList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div className=\"invalid-feedback\">\r\n                            No patient exists with this contact.\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }          \r\n         \r\n        const createDoctorElement = () => {\r\n\r\n            if(this.state.showdoctor)\r\n            {\r\n            \r\n\r\n                if(this.state.checkdoctor)\r\n                {// to stop useless api calls\r\n                    const promise1 = new Promise(function(resolve, reject) {\r\n                        \r\n                        axios.post('http://localhost:4000/getdoctors')\r\n                        .then(res => {\r\n                            resolve(res.data)\r\n                        });\r\n                    });\r\n                    \r\n                    promise1.then((value) =>{\r\n                        if(value!=\"empty\")\r\n                        this.setState({\r\n                            doctorList: value,\r\n                            doctor:value[0],\r\n                            checkdoctor:false\r\n                        });\r\n                    });\r\n                    \r\n                }\r\n\r\n                if(this.state.doctorList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Reference Doctor:</label>\r\n                                <br></br>\r\n                                <select value={this.state.doctor} onChange={this.onChangedoctor}>\r\n                                {this.state.doctorList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div>\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }\r\n\r\n        const createTableElement = () => {\r\n\r\n            this.updateoptions()\r\n            return(\r\n            <div style={{marginTop: 10,zIndex:1}}>\r\n            <h3>Medicine List</h3>\r\n            <Datatable\r\n            options={this.state.options}\r\n            actions={this.actionsRow}\r\n            />\r\n\r\n            </div>\r\n            )\r\n    }\r\n\r\n        const nameElement = createNameElement(this.state.contact);\r\n        const doctorElement = createDoctorElement();\r\n        const Table = createTableElement();\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                \r\n                    <div>\r\n                    <label>Contact: </label>\r\n                    <input \r\n                            type=\"text\" \r\n                            className={shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\"}\r\n                            value={this.state.contact}\r\n                            onChange={this.onChangecontact}\r\n                            onBlur={this.handleBlur(\"contact\")}\r\n                            />\r\n                            {shouldMarkError(\"contact\") ?\r\n                                <div className=\"invalid-feedback\">\r\n                                    Please provide a valid contact like +921112223456.\r\n                                </div>\r\n                            :\"\"}\r\n\r\n                    </div>\r\n\r\n\r\n                <div>\r\n                {nameElement}\r\n                </div>\r\n                \r\n                <br></br>\r\n\r\n                <div>\r\n                {doctorElement}\r\n                </div>\r\n\r\n\r\n                <div>\r\n                {Table}\r\n                </div>\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" disabled={isDisabled} style={{marginTop:10}} value=\"Add prescription\" onClick={this.onSubmit} className=\"btn-primary\" />\r\n                </div>\r\n\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}