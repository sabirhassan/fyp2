{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\test1\\\\front-end\\\\src\\\\components\\\\component-add-prescription.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nfunction Validatephone(contact) {\n  //    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  var phoneno = /^\\+?([0-9]{12})\\)?$/;\n\n  if (contact.match(phoneno)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction validate(contact) {\n  // true means invalid, so our conditions got reversed\n  return {\n    contact: Validatephone(contact)\n  };\n}\n\nexport default class AddPrescription extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBlur = field => evt => {\n      this.setState({\n        touched: { ...this.state.touched,\n          [field]: true\n        }\n      });\n    };\n\n    this.state = {\n      contact: '',\n      name: '',\n      nameList: [],\n      checkName: true,\n      doctor: '',\n      doctorList: [],\n      checkdoctor: true,\n      showdoctor: false,\n      showMedicine: false,\n      medicine: '',\n      dosage: '',\n      timings: {\n        morning: false,\n        afternoon: false,\n        evening: false\n      },\n      instructions: '',\n      prescriptions: [],\n      touched: {\n        contact: false\n      }\n    };\n    this.onChangecontact = this.onChangecontact.bind(this);\n    this.onChangename = this.onChangename.bind(this);\n    this.onChangedoctor = this.onChangedoctor.bind(this);\n    this.onChangemedicine = this.onChangemedicine.bind(this);\n    this.onChangedosage = this.onChangedosage.bind(this);\n    this.onChangeinstructions = this.onChangeinstructions.bind(this);\n  }\n\n  onChangecontact(e) {\n    this.setState({\n      contact: e.target.value,\n      nameList: [],\n      checkName: true\n    });\n  }\n\n  onChangename(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  onChangedoctor(e) {\n    this.setState({\n      doctor: e.target.value\n    });\n  }\n\n  onChangemedicine(e) {\n    this.setState({\n      medicine: e.target.value\n    });\n  }\n\n  onChangedosage(e) {\n    this.setState({\n      dosage: e.target.value\n    });\n  }\n\n  onChangeinstructions(e) {\n    this.setState({\n      instructions: e.target.value\n    });\n  }\n\n  render() {\n    const errors = validate(this.state.contact);\n    const isDisabled = Object.keys(errors).some(x => errors[x]);\n\n    const shouldMarkError = field => {\n      const hasError = errors[field];\n      const shouldShow = this.state.touched[field];\n      return hasError ? shouldShow : false;\n    };\n\n    const createNameElement = () => {\n      if (!Validatephone(this.state.contact)) {\n        const user = {\n          contact: this.state.contact\n        };\n\n        if (this.state.checkName) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getpatients', user).then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              nameList: value,\n              checkName: false,\n              showdoctor: true,\n              showMedicine: true\n            });\n          });\n        }\n\n        if (this.state.nameList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          }, \"Select Patient:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.name,\n            onChange: this.onChangename,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          }, this.state.nameList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            className: \"invalid-feedback\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, \"No patient exists with this contact.\");\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createDoctorElement = () => {\n      if (this.state.showdoctor) {\n        if (this.state.checkdoctor) {\n          // to stop useless api calls\n          const promise1 = new Promise(function (resolve, reject) {\n            axios.post('http://localhost:4000/getdoctors').then(res => {\n              resolve(res.data);\n            });\n          });\n          promise1.then(value => {\n            if (value != \"empty\") this.setState({\n              doctorList: value,\n              checkdocotr: false\n            });\n          });\n        }\n\n        if (this.state.nameList.length > 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 210\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            },\n            __self: this\n          }, \"Select Reference Doctor:\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212\n            },\n            __self: this\n          }), React.createElement(\"select\", {\n            value: this.state.doctor,\n            onChange: this.onChangedoctor,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }, this.state.doctorList.map(n => React.createElement(\"option\", {\n            value: n,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214\n            },\n            __self: this\n          }, n))));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          });\n        }\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        });\n      }\n    };\n\n    const createMedicineElement = () => {\n      if (this.state.showMedicine) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"Medicine\",\n          required: true,\n          className: \"form-control\",\n          value: this.state.medicine,\n          onChange: this.onChangemedicine,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: \"Dosage\",\n          required: true,\n          className: \"form-control\",\n          value: this.state.dosage,\n          onChange: this.onChangedosage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }), React.createElement(\"select\", {\n          placeholder: \"timings\",\n          multiple: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"doctor\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"Doctor\"), React.createElement(\"option\", {\n          value: \"doctor assistant\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }, \"Doctor Assistant\"), React.createElement(\"option\", {\n          value: \"lab staff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, \"Lab Staff\"), React.createElement(\"option\", {\n          value: \"admin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, \"Admin\")));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        });\n      }\n    };\n\n    const nameElement = createNameElement(this.state.contact);\n    const doctorElement = createDoctorElement();\n    const medicineElement = createMedicineElement();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Contact: \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\",\n      value: this.state.contact,\n      onChange: this.onChangecontact,\n      onBlur: this.handleBlur(\"contact\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), shouldMarkError(\"contact\") ? React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Please provide a valid contact like +921112223456.\") : \"\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, nameElement), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, doctorElement), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, medicineElement));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/test1/front-end/src/components/component-add-prescription.js"],"names":["React","Component","axios","Validatephone","contact","phoneno","match","validate","AddPrescription","constructor","props","handleBlur","field","evt","setState","touched","state","name","nameList","checkName","doctor","doctorList","checkdoctor","showdoctor","showMedicine","medicine","dosage","timings","morning","afternoon","evening","instructions","prescriptions","onChangecontact","bind","onChangename","onChangedoctor","onChangemedicine","onChangedosage","onChangeinstructions","e","target","value","render","errors","isDisabled","Object","keys","some","x","shouldMarkError","hasError","shouldShow","createNameElement","user","promise1","Promise","resolve","reject","post","then","res","data","length","map","n","createDoctorElement","checkdocotr","createMedicineElement","nameElement","doctorElement","medicineElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Validatephone(contact) \r\n{\r\n//    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    var phoneno = /^\\+?([0-9]{12})\\)?$/;\r\n    if(contact.match(phoneno))\r\n    {\r\n    return false;\r\n    }\r\n    else\r\n    {\r\n    return true;\r\n    }\r\n}\r\n\r\nfunction validate(contact) {\r\n    // true means invalid, so our conditions got reversed\r\n    return {\r\n       contact: Validatephone(contact),\r\n    };\r\n}\r\n\r\nexport default class AddPrescription extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            contact: '',\r\n            name:'',\r\n            nameList:[],\r\n            checkName:true,\r\n            doctor:'',\r\n            doctorList:[],\r\n            checkdoctor:true,\r\n            showdoctor:false,\r\n            showMedicine:false,\r\n            medicine:'',\r\n            dosage:'',\r\n            timings:{\r\n                morning:false,\r\n                afternoon:false,\r\n                evening:false,\r\n            },\r\n            instructions:'',\r\n            prescriptions : [],\r\n            touched: {\r\n                contact: false,\r\n              }\r\n            \r\n        }\r\n        this.onChangecontact = this.onChangecontact.bind(this);\r\n        this.onChangename = this.onChangename.bind(this);\r\n        this.onChangedoctor = this.onChangedoctor.bind(this);\r\n        this.onChangemedicine = this.onChangemedicine.bind(this);\r\n        this.onChangedosage = this.onChangedosage.bind(this);\r\n        this.onChangeinstructions = this.onChangeinstructions.bind(this);\r\n\r\n    }\r\n    onChangecontact(e) {\r\n        this.setState({\r\n            contact: e.target.value,\r\n            nameList:[],\r\n            checkName:true\r\n        });\r\n    }\r\n\r\n    onChangename(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedoctor(e) {\r\n        this.setState({\r\n            doctor: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangemedicine(e) {\r\n        this.setState({\r\n            medicine: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangedosage(e) {\r\n        this.setState({\r\n            dosage: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeinstructions(e) {\r\n        this.setState({\r\n            instructions: e.target.value\r\n        });\r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n          touched: { ...this.state.touched, [field]: true },\r\n        });\r\n      } \r\n\r\n\r\n    render() {\r\n\r\n        const errors = validate(this.state.contact);\r\n        const isDisabled = Object.keys(errors).some(x => errors[x]);\r\n\r\n        const shouldMarkError = field => {\r\n            const hasError = errors[field];\r\n            const shouldShow = this.state.touched[field];      \r\n            return hasError ? shouldShow : false;\r\n          };\r\n    \r\n        const createNameElement = () => {\r\n\r\n            if(!Validatephone(this.state.contact))\r\n            {\r\n            \r\n\r\n            const user= {\r\n                contact:this.state.contact,\r\n            }\r\n\r\n            if(this.state.checkName)\r\n            {// to stop useless api calls\r\n                const promise1 = new Promise(function(resolve, reject) {\r\n                    \r\n                    axios.post('http://localhost:4000/getpatients', user)\r\n                    .then(res => {\r\n                        resolve(res.data)\r\n                    });\r\n                });\r\n                \r\n                promise1.then((value) =>{\r\n                    if(value!=\"empty\")\r\n                    this.setState({\r\n                        nameList: value,\r\n                        checkName:false,\r\n                        showdoctor:true,\r\n                        showMedicine:true\r\n                    });\r\n                });\r\n                \r\n            }\r\n\r\n                if(this.state.nameList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Patient:</label>\r\n                                <br></br>\r\n                                <select value={this.state.name} onChange={this.onChangename}>\r\n                                {this.state.nameList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div className=\"invalid-feedback\">\r\n                            No patient exists with this contact.\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }          \r\n         \r\n        const createDoctorElement = () => {\r\n\r\n            if(this.state.showdoctor)\r\n            {\r\n            \r\n\r\n                if(this.state.checkdoctor)\r\n                {// to stop useless api calls\r\n                    const promise1 = new Promise(function(resolve, reject) {\r\n                        \r\n                        axios.post('http://localhost:4000/getdoctors')\r\n                        .then(res => {\r\n                            resolve(res.data)\r\n                        });\r\n                    });\r\n                    \r\n                    promise1.then((value) =>{\r\n                        if(value!=\"empty\")\r\n                        this.setState({\r\n                            doctorList: value,\r\n                            checkdocotr:false\r\n                        });\r\n                    });\r\n                    \r\n                }\r\n\r\n                if(this.state.nameList.length>0)\r\n                {\r\n                    return (\r\n                            <div>\r\n                            <label >Select Reference Doctor:</label>\r\n                                <br></br>\r\n                                <select value={this.state.doctor} onChange={this.onChangedoctor}>\r\n                                {this.state.doctorList.map((n) => <option value={n}>{n}</option>)}\r\n                                </select>\r\n                                \r\n                            </div>\r\n                            );            \r\n                }\r\n                else\r\n                {\r\n                    return(\r\n                    <div>\r\n                    </div>\r\n                    );\r\n                }  \r\n\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div>\r\n                    </div>\r\n                    );\r\n            }\r\n        }\r\n\r\n        const createMedicineElement = () => {\r\n\r\n            if(this.state.showMedicine)\r\n            {\r\n                return (\r\n                    <div>\r\n                        <br></br>\r\n                        <input \r\n                        type=\"text\"\r\n                        placeholder=\"Medicine\"\r\n                        required\r\n                        className={\"form-control\"}\r\n                        value={this.state.medicine}\r\n                        onChange={this.onChangemedicine}\r\n                        />\r\n\r\n\r\n                        <input \r\n                        type=\"text\"\r\n                        placeholder=\"Dosage\"\r\n                        required \r\n                        className={\"form-control\"}\r\n                        value={this.state.dosage}\r\n                        onChange={this.onChangedosage}\r\n                        />\r\n\r\n                        <select  placeholder=\"timings\" multiple>\r\n                        <option value=\"doctor\">Doctor</option>\r\n                        <option value=\"doctor assistant\">Doctor Assistant</option>\r\n                        <option value=\"lab staff\">Lab Staff</option>\r\n                        <option value=\"admin\">Admin</option>\r\n                        </select>\r\n\r\n                    </div>\r\n                    );\r\n            }\r\n\r\n            else\r\n            {\r\n                return(\r\n                    <div>\r\n                    </div>\r\n                );\r\n            }\r\n        \r\n        }\r\n\r\n        const nameElement = createNameElement(this.state.contact);\r\n        const doctorElement = createDoctorElement();\r\n        const medicineElement = createMedicineElement();\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"form-group\">\r\n                    <label>Contact: </label>\r\n                    <input \r\n                            type=\"text\" \r\n                            className={shouldMarkError(\"contact\") ? \"form-control is-invalid\" : \"form-control\"}\r\n                            value={this.state.contact}\r\n                            onChange={this.onChangecontact}\r\n                            onBlur={this.handleBlur(\"contact\")}\r\n                            />\r\n                            {shouldMarkError(\"contact\") ?\r\n                                <div className=\"invalid-feedback\">\r\n                                    Please provide a valid contact like +921112223456.\r\n                                </div>\r\n                            :\"\"}\r\n\r\n                </div>\r\n\r\n\r\n                <div>\r\n                {nameElement}\r\n                </div>\r\n                \r\n                <br></br>\r\n\r\n                <div>\r\n                {doctorElement}\r\n                </div>\r\n\r\n                <div>\r\n                {medicineElement}\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}